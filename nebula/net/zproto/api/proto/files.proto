/*
 *  Copyright (c) 2016, https://github.com/wubenqi
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package zproto;

option java_package = "com.zchat.engine.zproto";
option java_outer_classname = "ZProtoFiles";
option optimize_for = CODE_SIZE;

// Media and Files

// Location of file on server
message FileLocation {
  int64 file_id = 1; //   Unique Id of file
  int64 access_hash = 2; //   Access hash of file
}

// Image location
message ImageLocation {
  FileLocation file_location = 1; //   Location of file
  int32 width = 2; //   Width of avatar image
  int32 height = 3; //   Height of avatar image
  int32 file_size = 4; //   Size of file
}

// Avatar Image
message AvatarImage {
  FileLocation file_location = 1; //   Location of file
  int32 width = 2; //   Width of avatar image
  int32 height = 3; //   Height of avatar image
  int32 file_size = 4; //   Size of file
}

// Avatar of User or Group
message Avatar {
  AvatarImage small_image = 1; //   Optional small image of avatar box in 100x100
  AvatarImage large_image = 2; //   Optional large image of avatar box in 200x200
  AvatarImage full_image = 3; //   Optional full screen image of avatar
}

// Fast thumb of media messages. Less than 90x90 and compressed by JPEG with low quality
message FastThumb {
  int32 w = 1; //   Width of thumb
  int32 h = 2; //   Height of thump
  bytes thumb = 3; //   compressed image data
}

// Colors
enum Colors {
  red = 1;
  yellow = 2;
  green = 3;
}

message Color {
}

// RGB Color
message RgbColor {
  int32 rgb = 1; //   RGB color value
}

// Predefined color
message PredefinedColor {
  Colors color = 1; //   Predefined color value
}

// empty

// HTTP Header record
message HTTPHeader {
  string key = 1; //   HTTP Header name
  string value = 2; //   HTTP Header value
}

// File url description
message FileUrlDescription {
  int64 file_id = 1; //   File id of url
  string url = 2; //   Url for downloading
  int32 timeout = 3; //   Timeout of url
  string unsigned_url = 4; //   Unsigned URL (used to honor web caches)
  repeated HTTPHeader unsigned_url_headers = 5; //   Headers that is required to download files with unsigned url
}

// Requesting file URL for downloading
// GetFileUrlReq --> GetFileUrlRsp
message GetFileUrlReq {
  // int32 COMMAND_ID = 77;
  FileLocation file = 1; // file's location
}

message GetFileUrlRsp {
  // int32 COMMAND_ID = 78;
  string url = 1; //   Url for downloading
  int32 timeout = 2; //   Timeout of url
  string unsigned_url = 3; //   Unsigned URL (used to honor web caches)
  repeated HTTPHeader unsigned_url_headers = 4; //   Headers that is required to download files with unsigned url
}

// Requesting multiple fle URL for downloading
// GetFileUrlsReq --> GetFileUrlsRsp
message GetFileUrlsReq {
  // int32 COMMAND_ID = 2573;
  repeated FileLocation files = 1; // File locations to load urls
}

message GetFileUrlsRsp {
  // int32 COMMAND_ID = 2574;
  repeated FileUrlDescription file_urls = 1; //   File urls
}

// Get File URL Builder that allows to build file urls from client side
// GetFileUrlBuilderReq --> GetFileUrlBuilderRsp
message GetFileUrlBuilderReq {
  // int32 COMMAND_ID = 2579;
  repeated string supported_signature_algorithms = 1; // Supported signature algorithms by client
}

message GetFileUrlBuilderRsp {
  // int32 COMMAND_ID = 2580;
  string base_url = 1; //   Base Url for files
  string algo = 2; //   Signature algorithm
  string seed = 5; //   Public-visible seed of signature
  bytes signature_secret = 3; //   Signature Secret
  int32 timeout = 4; //   Timeout of url builder
}

// Requesting pload url
// GetFileUploadUrlReq --> GetFileUploadUrlRsp
message GetFileUploadUrlReq {
  // int32 COMMAND_ID = 97;
  int32 expected_size = 1; // Expected size of uploading file. May be inaccurate. Used for size allocation optimizations.
}

message GetFileUploadUrlRsp {
  // int32 COMMAND_ID = 121;
  string url = 1; //   Url for uploading
  bytes upload_key = 2; //   Upload key for upload
}

// Comminting uploaded file to storage
// CommitFileUploadReq --> CommitFileUploadRsp
message CommitFileUploadReq {
  // int32 COMMAND_ID = 122;
  bytes upload_key = 1;
  string file_name = 2;
}

message CommitFileUploadRsp {
  // int32 COMMAND_ID = 138;
  FileLocation uploaded_file_location = 1; //   Result file location
}

// Upload file part
// GetFileUploadPartUrlReq --> GetFileUploadPartUrlRsp
message GetFileUploadPartUrlReq {
  // int32 COMMAND_ID = 142;
  int32 part_number = 1;
  int32 part_size = 2;
  bytes upload_key = 3; // Upload Key from requestFileUploadUrl
}

message GetFileUploadPartUrlRsp {
  // int32 COMMAND_ID = 141;
  string url = 1; //   Upload file part url
}

