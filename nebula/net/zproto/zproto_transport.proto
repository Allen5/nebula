/*
 *  Copyright (c) 2016, https://github.com/zhatalk
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package zproto;

option java_package = "com.nebula.net.zproto";
option java_outer_classname = "ZProtoTransport";
// option optimize_for = CODE_SIZE;
// option optimize_for = LITE_RUNTIME;
option optimize_for = SPEED;

message Package {
  // unique identifier that is constant thru all application lifetime
  int64 auth_id = 1;
  // random identifier of current session
  int64 session_id = 2;
  // message header
  int32 message_header = 3;
  // message contents
  // message: PlainTextMessage/EncryptedMessage/Drop/AuthIdInvalid
  bytes message = 4;
}

// Plain Text message Container
message PlainTextMessage {
  // HEADER = 0x01
  // message identifier
  int64 message_id = 1;
  // message body
  bytes message = 2;
}

// Encrypted message container
message EncryptedMessage {
  // HEADER = 0x02
  // Sequence number starting from zero for each direction
  int64 seq_number = 1;
  // First encryption level
  bytes encrypted_package = 2;
}

// Drop Container
message Drop {
  // HEADER = 0x03
  // Message Id of message that causes Drop. May be zero if not available
  int64 message_id = 1;
  // Error Tag
  string error_tag = 2;
}

message RequestAuthId {
  // HEADER = 0xF0
}

message ResponseAuthId {
  // HEADER = 0xF1
  int64 auth_id = 1;
}

// Before start Client MUST send RequestStartAuth message:
message RequestStartAuth {
  // HEADER = 0xE0
  int64 random_id = 1;
}

// Server MUST return list of truncated to 8 bytes of SHA-256 of available keys
message ResponseStartAuth {
  // HEADER = 0xE1
  int64 random_id = 1;
  repeated int64 available_keys = 2;
  bytes server_nonce = 3;
}

// Client downloads required key. Client can skip downloading keys if it have built-in keys installed.
message RequestGetServerKey {
  // HEADER = 0xE2
  int64 key_id = 1;
}

// Server return raw key data. Client MUST to check received key by comparing FULL hash that is hardcoded inside application. Again, DON'T compare truncated hashes - this is insecure.
message ResponseGetServerKey {
  // HEADER = 0xE3
  int64 key_id = 1;
  bytes key = 2;
}

// Performing Diffie Hellman
message RequestDH {
  // HEADER = 0xE6
  int64 random_id = 1;
  // Used keyId
  int64 key_id = 2;
  // Client's 32 securely generated bytes
  bytes client_nonce = 3;
  // Client's key used for encryption
  bytes client_key = 4;
}

// Calculations
//
// pre_master_secret := <result_of_dh>
// master_secret := PRF_COMBINED(pre_master_secret, "master secret", clientNonce + ServerNonce, 128)
// verify := PRF_COMBINED(master_secret, "client finished", clientNonce + ServerNonce, 256)
// verify_sign := Ed25519(verification, server_private_signing_key)
//
// where PRF_COMBINED:
//  PRF(COMBINE(SHA256, STREEBOG256)), where:
//    COMBINE(str, HASH1, HASH2) = HASH1(str + HASH2(str))
//
//master_secret is result encryption key. First 128 bytes is US encryption keys and last 128 bytes is Russian encryption keys.
message ResponseDoDH {
  // HEADER = 0xE7
  int64 random_id = 1;
  bytes verify = 2;
  bytes verify_sign = 3;
}

message ProtoRpcRequest {
  // HEADER = 0x03
  // Request body
  bytes payload = 1;
}

message ProtoRpcResponse {
  // HEADER = 0x04
  // messageId from Message that contains ProtoRpcRequest
  int64 message_id = 1;
  // Response body
  bytes payload = 2;
}

message ProtoPush {
  // HEADER = 0x05
  // Push body
  bytes payload = 1;
}

message MessageAck {
  // HEADER = 0x06
  // Message Identificators for confirmation
  repeated int64 message_ids = 1;
}

// Notification about unsent message (usually ProtoRpcRequest or ProtoPush)
message UnsentMessage {
  // HEADER = 0x07
  // Sent Message Id
  int64 message_id = 1;
  // Size of message in bytes
  int32 len = 2;
}

// Notification about unsent ProtoRpcResponse
message UnsentResponse {
  // HEADER = 0x08
  // Sent Message Id
  int64 message_id = 1;
  // Request Message Id
  int64 request_message_id = 2;
  // Size of message in bytes
  int32 len = 3;
}

// Requesting resending of message
message RequestResend {
  // HEADER = 0x09
  // Message Id for resend
  int64 message_id = 1;
}

message NewSession {
  // HEADER = 0x0C
  // Created Session Id
  int64 session_id = 1;
  // Message Id of Message that created session
  int64 message_id = 2;
}

message SessionHello {
  // HEADER = 0x0F
}

message SessionLost {
  // HEADER = 0x10
}

message Container {
  // HEADER = 0x0A
  // Messages count
  // count: varint
  // Messages in container
  repeated bytes data = 1; // : Message[]
}

