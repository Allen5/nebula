/*
 *  Copyright (c) 2016, https://github.com/zhatalk
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package zproto;

option java_package = "com.nebula.net.zproto";
option java_outer_classname = "ZProtoConnection";
option optimize_for = CODE_SIZE;

// Connection Level
message Frame {
  // Index of package starting from zero.
  // If packageIndex is broken connection need to be dropped.
  int32 package_index = 1;
  // Type of message
  int32 header = 2;
  // Package payload
  bytes body = 3;
  // CRC32 of body
  int32 crc32 = 4;
}

// header = 1
// Ping message can be sent from both sides
message Ping {
  bytes random_bytes = 1;
}

// header = 2
// Pong message need to be sent immediately after receving Ping message
message Pong {
  // Same bytes as in Ping package
  bytes random_bytes = 1;
}

// header = 3
// Notification about connection drop
message Drop {
  int64 message_id = 1;
  int32 error_code = 2;
  string error_message = 3;
}

// header = 4
// Sent by server when we need to temporary redirect to another server
message Redirect {
  string host = 1;
  int32 port = 2;
  // Redirection timeout
  int32 timeout = 3;
}

// header = 6
// Proto package is received by destination peer. Used for determening of connection state
message Ack {
  int32 received_aackage_index = 1;
}

// header == 0xFF
message Handshake {
  // Current MTProto revision
  // For Rev 2 need to eq 1
  int32 proto_revision = 1;
  // API Major and Minor version
  int32 api_major_version = 2;
  int32 api_minor_version = 3;
  // Some Random Bytes (suggested size is 32 bytes)
  bytes random_bytes = 4;
}

// header == 0xFE
message HandshakeResponse {
  // return same versions as request, 0 - version is not supported
  int32 proto_revision = 1;
  int32 api_major_version = 2;
  int32 api_minor_version = 3;
  // SHA256 of randomBytes from request
  bytes sha1 = 4;
}
