// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zproto_transport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zproto_transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zproto {

namespace {

const ::google::protobuf::Descriptor* Package_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Package_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlainTextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlainTextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAuthId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAuthId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseAuthId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseAuthId_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStartAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStartAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseStartAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStartAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGetServerKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGetServerKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGetServerKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGetServerKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDH_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDoDH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDoDH_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResend_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionLost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionLost_reflection_ = NULL;
const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zproto_5ftransport_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_zproto_5ftransport_2eproto() {
  protobuf_AddDesc_zproto_5ftransport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zproto_transport.proto");
  GOOGLE_CHECK(file != NULL);
  Package_descriptor_ = file->message_type(0);
  static const int Package_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, auth_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, message_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, message_),
  };
  Package_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Package_descriptor_,
      Package::default_instance_,
      Package_offsets_,
      -1,
      -1,
      -1,
      sizeof(Package),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Package, _is_default_instance_));
  PlainTextMessage_descriptor_ = file->message_type(1);
  static const int PlainTextMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlainTextMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlainTextMessage, message_),
  };
  PlainTextMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlainTextMessage_descriptor_,
      PlainTextMessage::default_instance_,
      PlainTextMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlainTextMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlainTextMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlainTextMessage, _is_default_instance_));
  EncryptedMessage_descriptor_ = file->message_type(2);
  static const int EncryptedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedMessage, seq_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedMessage, encrypted_package_),
  };
  EncryptedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EncryptedMessage_descriptor_,
      EncryptedMessage::default_instance_,
      EncryptedMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(EncryptedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedMessage, _is_default_instance_));
  Drop_descriptor_ = file->message_type(3);
  static const int Drop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, error_tag_),
  };
  Drop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Drop_descriptor_,
      Drop::default_instance_,
      Drop_offsets_,
      -1,
      -1,
      -1,
      sizeof(Drop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, _is_default_instance_));
  RequestAuthId_descriptor_ = file->message_type(4);
  static const int RequestAuthId_offsets_[1] = {
  };
  RequestAuthId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestAuthId_descriptor_,
      RequestAuthId::default_instance_,
      RequestAuthId_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestAuthId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuthId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAuthId, _is_default_instance_));
  ResponseAuthId_descriptor_ = file->message_type(5);
  static const int ResponseAuthId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAuthId, auth_id_),
  };
  ResponseAuthId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseAuthId_descriptor_,
      ResponseAuthId::default_instance_,
      ResponseAuthId_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseAuthId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAuthId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAuthId, _is_default_instance_));
  RequestStartAuth_descriptor_ = file->message_type(6);
  static const int RequestStartAuth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartAuth, random_id_),
  };
  RequestStartAuth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestStartAuth_descriptor_,
      RequestStartAuth::default_instance_,
      RequestStartAuth_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestStartAuth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartAuth, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartAuth, _is_default_instance_));
  ResponseStartAuth_descriptor_ = file->message_type(7);
  static const int ResponseStartAuth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartAuth, random_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartAuth, available_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartAuth, server_nonce_),
  };
  ResponseStartAuth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseStartAuth_descriptor_,
      ResponseStartAuth::default_instance_,
      ResponseStartAuth_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseStartAuth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartAuth, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartAuth, _is_default_instance_));
  RequestGetServerKey_descriptor_ = file->message_type(8);
  static const int RequestGetServerKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetServerKey, key_id_),
  };
  RequestGetServerKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestGetServerKey_descriptor_,
      RequestGetServerKey::default_instance_,
      RequestGetServerKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestGetServerKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetServerKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetServerKey, _is_default_instance_));
  ResponseGetServerKey_descriptor_ = file->message_type(9);
  static const int ResponseGetServerKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetServerKey, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetServerKey, key_),
  };
  ResponseGetServerKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseGetServerKey_descriptor_,
      ResponseGetServerKey::default_instance_,
      ResponseGetServerKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseGetServerKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetServerKey, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetServerKey, _is_default_instance_));
  RequestDH_descriptor_ = file->message_type(10);
  static const int RequestDH_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, random_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, client_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, client_key_),
  };
  RequestDH_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestDH_descriptor_,
      RequestDH::default_instance_,
      RequestDH_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestDH),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDH, _is_default_instance_));
  ResponseDoDH_descriptor_ = file->message_type(11);
  static const int ResponseDoDH_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDoDH, random_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDoDH, verify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDoDH, verify_sign_),
  };
  ResponseDoDH_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseDoDH_descriptor_,
      ResponseDoDH::default_instance_,
      ResponseDoDH_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseDoDH),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDoDH, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDoDH, _is_default_instance_));
  ProtoRpcRequest_descriptor_ = file->message_type(12);
  static const int ProtoRpcRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcRequest, payload_),
  };
  ProtoRpcRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoRpcRequest_descriptor_,
      ProtoRpcRequest::default_instance_,
      ProtoRpcRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoRpcRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcRequest, _is_default_instance_));
  ProtoRpcResponse_descriptor_ = file->message_type(13);
  static const int ProtoRpcResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcResponse, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcResponse, payload_),
  };
  ProtoRpcResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoRpcResponse_descriptor_,
      ProtoRpcResponse::default_instance_,
      ProtoRpcResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoRpcResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRpcResponse, _is_default_instance_));
  ProtoPush_descriptor_ = file->message_type(14);
  static const int ProtoPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPush, payload_),
  };
  ProtoPush_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoPush_descriptor_,
      ProtoPush::default_instance_,
      ProtoPush_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoPush),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPush, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPush, _is_default_instance_));
  MessageAck_descriptor_ = file->message_type(15);
  static const int MessageAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAck, message_ids_),
  };
  MessageAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageAck_descriptor_,
      MessageAck::default_instance_,
      MessageAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageAck, _is_default_instance_));
  UnsentMessage_descriptor_ = file->message_type(16);
  static const int UnsentMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentMessage, len_),
  };
  UnsentMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnsentMessage_descriptor_,
      UnsentMessage::default_instance_,
      UnsentMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnsentMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentMessage, _is_default_instance_));
  UnsentResponse_descriptor_ = file->message_type(17);
  static const int UnsentResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentResponse, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentResponse, request_message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentResponse, len_),
  };
  UnsentResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnsentResponse_descriptor_,
      UnsentResponse::default_instance_,
      UnsentResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnsentResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsentResponse, _is_default_instance_));
  RequestResend_descriptor_ = file->message_type(18);
  static const int RequestResend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResend, message_id_),
  };
  RequestResend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestResend_descriptor_,
      RequestResend::default_instance_,
      RequestResend_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestResend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResend, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResend, _is_default_instance_));
  NewSession_descriptor_ = file->message_type(19);
  static const int NewSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSession, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSession, message_id_),
  };
  NewSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewSession_descriptor_,
      NewSession::default_instance_,
      NewSession_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSession, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSession, _is_default_instance_));
  SessionHello_descriptor_ = file->message_type(20);
  static const int SessionHello_offsets_[1] = {
  };
  SessionHello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionHello_descriptor_,
      SessionHello::default_instance_,
      SessionHello_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionHello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHello, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionHello, _is_default_instance_));
  SessionLost_descriptor_ = file->message_type(21);
  static const int SessionLost_offsets_[1] = {
  };
  SessionLost_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionLost_descriptor_,
      SessionLost::default_instance_,
      SessionLost_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionLost),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLost, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionLost, _is_default_instance_));
  Container_descriptor_ = file->message_type(22);
  static const int Container_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, data_),
  };
  Container_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      -1,
      -1,
      -1,
      sizeof(Container),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zproto_5ftransport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Package_descriptor_, &Package::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlainTextMessage_descriptor_, &PlainTextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EncryptedMessage_descriptor_, &EncryptedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Drop_descriptor_, &Drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestAuthId_descriptor_, &RequestAuthId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseAuthId_descriptor_, &ResponseAuthId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestStartAuth_descriptor_, &RequestStartAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseStartAuth_descriptor_, &ResponseStartAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestGetServerKey_descriptor_, &RequestGetServerKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseGetServerKey_descriptor_, &ResponseGetServerKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestDH_descriptor_, &RequestDH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseDoDH_descriptor_, &ResponseDoDH::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoRpcRequest_descriptor_, &ProtoRpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoRpcResponse_descriptor_, &ProtoRpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoPush_descriptor_, &ProtoPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageAck_descriptor_, &MessageAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnsentMessage_descriptor_, &UnsentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnsentResponse_descriptor_, &UnsentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestResend_descriptor_, &RequestResend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewSession_descriptor_, &NewSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionHello_descriptor_, &SessionHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionLost_descriptor_, &SessionLost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Container_descriptor_, &Container::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zproto_5ftransport_2eproto() {
  delete Package::default_instance_;
  delete Package_reflection_;
  delete PlainTextMessage::default_instance_;
  delete PlainTextMessage_reflection_;
  delete EncryptedMessage::default_instance_;
  delete EncryptedMessage_reflection_;
  delete Drop::default_instance_;
  delete Drop_reflection_;
  delete RequestAuthId::default_instance_;
  delete RequestAuthId_reflection_;
  delete ResponseAuthId::default_instance_;
  delete ResponseAuthId_reflection_;
  delete RequestStartAuth::default_instance_;
  delete RequestStartAuth_reflection_;
  delete ResponseStartAuth::default_instance_;
  delete ResponseStartAuth_reflection_;
  delete RequestGetServerKey::default_instance_;
  delete RequestGetServerKey_reflection_;
  delete ResponseGetServerKey::default_instance_;
  delete ResponseGetServerKey_reflection_;
  delete RequestDH::default_instance_;
  delete RequestDH_reflection_;
  delete ResponseDoDH::default_instance_;
  delete ResponseDoDH_reflection_;
  delete ProtoRpcRequest::default_instance_;
  delete ProtoRpcRequest_reflection_;
  delete ProtoRpcResponse::default_instance_;
  delete ProtoRpcResponse_reflection_;
  delete ProtoPush::default_instance_;
  delete ProtoPush_reflection_;
  delete MessageAck::default_instance_;
  delete MessageAck_reflection_;
  delete UnsentMessage::default_instance_;
  delete UnsentMessage_reflection_;
  delete UnsentResponse::default_instance_;
  delete UnsentResponse_reflection_;
  delete RequestResend::default_instance_;
  delete RequestResend_reflection_;
  delete NewSession::default_instance_;
  delete NewSession_reflection_;
  delete SessionHello::default_instance_;
  delete SessionHello_reflection_;
  delete SessionLost::default_instance_;
  delete SessionLost_reflection_;
  delete Container::default_instance_;
  delete Container_reflection_;
}

void protobuf_AddDesc_zproto_5ftransport_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_zproto_5ftransport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026zproto_transport.proto\022\006zproto\"W\n\007Pack"
    "age\022\017\n\007auth_id\030\001 \001(\003\022\022\n\nsession_id\030\002 \001(\003"
    "\022\026\n\016message_header\030\003 \001(\005\022\017\n\007message\030\004 \001("
    "\014\"7\n\020PlainTextMessage\022\022\n\nmessage_id\030\001 \001("
    "\003\022\017\n\007message\030\002 \001(\014\"A\n\020EncryptedMessage\022\022"
    "\n\nseq_number\030\001 \001(\003\022\031\n\021encrypted_package\030"
    "\002 \001(\014\"-\n\004Drop\022\022\n\nmessage_id\030\001 \001(\003\022\021\n\terr"
    "or_tag\030\002 \001(\t\"\017\n\rRequestAuthId\"!\n\016Respons"
    "eAuthId\022\017\n\007auth_id\030\001 \001(\003\"%\n\020RequestStart"
    "Auth\022\021\n\trandom_id\030\001 \001(\003\"T\n\021ResponseStart"
    "Auth\022\021\n\trandom_id\030\001 \001(\003\022\026\n\016available_key"
    "s\030\002 \003(\003\022\024\n\014server_nonce\030\003 \001(\014\"%\n\023Request"
    "GetServerKey\022\016\n\006key_id\030\001 \001(\003\"3\n\024Response"
    "GetServerKey\022\016\n\006key_id\030\001 \001(\003\022\013\n\003key\030\002 \001("
    "\014\"X\n\tRequestDH\022\021\n\trandom_id\030\001 \001(\003\022\016\n\006key"
    "_id\030\002 \001(\003\022\024\n\014client_nonce\030\003 \001(\014\022\022\n\nclien"
    "t_key\030\004 \001(\014\"F\n\014ResponseDoDH\022\021\n\trandom_id"
    "\030\001 \001(\003\022\016\n\006verify\030\002 \001(\014\022\023\n\013verify_sign\030\003 "
    "\001(\014\"\"\n\017ProtoRpcRequest\022\017\n\007payload\030\001 \001(\014\""
    "7\n\020ProtoRpcResponse\022\022\n\nmessage_id\030\001 \001(\003\022"
    "\017\n\007payload\030\002 \001(\014\"\034\n\tProtoPush\022\017\n\007payload"
    "\030\001 \001(\014\"!\n\nMessageAck\022\023\n\013message_ids\030\001 \003("
    "\003\"0\n\rUnsentMessage\022\022\n\nmessage_id\030\001 \001(\003\022\013"
    "\n\003len\030\002 \001(\005\"M\n\016UnsentResponse\022\022\n\nmessage"
    "_id\030\001 \001(\003\022\032\n\022request_message_id\030\002 \001(\003\022\013\n"
    "\003len\030\003 \001(\005\"#\n\rRequestResend\022\022\n\nmessage_i"
    "d\030\001 \001(\003\"4\n\nNewSession\022\022\n\nsession_id\030\001 \001("
    "\003\022\022\n\nmessage_id\030\002 \001(\003\"\016\n\014SessionHello\"\r\n"
    "\013SessionLost\"\031\n\tContainer\022\014\n\004data\030\001 \003(\014B"
    "*\n\025com.nebula.net.zprotoB\017ZProtoTranspor"
    "tH\001b\006proto3", 1211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zproto_transport.proto", &protobuf_RegisterTypes);
  Package::default_instance_ = new Package();
  PlainTextMessage::default_instance_ = new PlainTextMessage();
  EncryptedMessage::default_instance_ = new EncryptedMessage();
  Drop::default_instance_ = new Drop();
  RequestAuthId::default_instance_ = new RequestAuthId();
  ResponseAuthId::default_instance_ = new ResponseAuthId();
  RequestStartAuth::default_instance_ = new RequestStartAuth();
  ResponseStartAuth::default_instance_ = new ResponseStartAuth();
  RequestGetServerKey::default_instance_ = new RequestGetServerKey();
  ResponseGetServerKey::default_instance_ = new ResponseGetServerKey();
  RequestDH::default_instance_ = new RequestDH();
  ResponseDoDH::default_instance_ = new ResponseDoDH();
  ProtoRpcRequest::default_instance_ = new ProtoRpcRequest();
  ProtoRpcResponse::default_instance_ = new ProtoRpcResponse();
  ProtoPush::default_instance_ = new ProtoPush();
  MessageAck::default_instance_ = new MessageAck();
  UnsentMessage::default_instance_ = new UnsentMessage();
  UnsentResponse::default_instance_ = new UnsentResponse();
  RequestResend::default_instance_ = new RequestResend();
  NewSession::default_instance_ = new NewSession();
  SessionHello::default_instance_ = new SessionHello();
  SessionLost::default_instance_ = new SessionLost();
  Container::default_instance_ = new Container();
  Package::default_instance_->InitAsDefaultInstance();
  PlainTextMessage::default_instance_->InitAsDefaultInstance();
  EncryptedMessage::default_instance_->InitAsDefaultInstance();
  Drop::default_instance_->InitAsDefaultInstance();
  RequestAuthId::default_instance_->InitAsDefaultInstance();
  ResponseAuthId::default_instance_->InitAsDefaultInstance();
  RequestStartAuth::default_instance_->InitAsDefaultInstance();
  ResponseStartAuth::default_instance_->InitAsDefaultInstance();
  RequestGetServerKey::default_instance_->InitAsDefaultInstance();
  ResponseGetServerKey::default_instance_->InitAsDefaultInstance();
  RequestDH::default_instance_->InitAsDefaultInstance();
  ResponseDoDH::default_instance_->InitAsDefaultInstance();
  ProtoRpcRequest::default_instance_->InitAsDefaultInstance();
  ProtoRpcResponse::default_instance_->InitAsDefaultInstance();
  ProtoPush::default_instance_->InitAsDefaultInstance();
  MessageAck::default_instance_->InitAsDefaultInstance();
  UnsentMessage::default_instance_->InitAsDefaultInstance();
  UnsentResponse::default_instance_->InitAsDefaultInstance();
  RequestResend::default_instance_->InitAsDefaultInstance();
  NewSession::default_instance_->InitAsDefaultInstance();
  SessionHello::default_instance_->InitAsDefaultInstance();
  SessionLost::default_instance_->InitAsDefaultInstance();
  Container::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zproto_5ftransport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zproto_5ftransport_2eproto {
  StaticDescriptorInitializer_zproto_5ftransport_2eproto() {
    protobuf_AddDesc_zproto_5ftransport_2eproto();
  }
} static_descriptor_initializer_zproto_5ftransport_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Package::kAuthIdFieldNumber;
const int Package::kSessionIdFieldNumber;
const int Package::kMessageHeaderFieldNumber;
const int Package::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Package::Package()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.Package)
}

void Package::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Package::Package(const Package& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.Package)
}

void Package::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auth_id_ = GOOGLE_LONGLONG(0);
  session_id_ = GOOGLE_LONGLONG(0);
  message_header_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:zproto.Package)
  SharedDtor();
}

void Package::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Package::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Package_descriptor_;
}

const Package& Package::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

Package* Package::default_instance_ = NULL;

Package* Package::New(::google::protobuf::Arena* arena) const {
  Package* n = new Package;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.Package)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Package, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Package*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(auth_id_, session_id_);
  message_header_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.Package)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 auth_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auth_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int64 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_header;
        break;
      }

      // optional int32 message_header = 3;
      case 3: {
        if (tag == 24) {
         parse_message_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_header_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.Package)
  return false;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.Package)
  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->auth_id(), output);
  }

  // optional int64 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->session_id(), output);
  }

  // optional int32 message_header = 3;
  if (this->message_header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_header(), output);
  }

  // optional bytes message = 4;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.Package)
}

::google::protobuf::uint8* Package::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.Package)
  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->auth_id(), target);
  }

  // optional int64 session_id = 2;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->session_id(), target);
  }

  // optional int32 message_header = 3;
  if (this->message_header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_header(), target);
  }

  // optional bytes message = 4;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.Package)
  return target;
}

int Package::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.Package)
  int total_size = 0;

  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auth_id());
  }

  // optional int64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // optional int32 message_header = 3;
  if (this->message_header() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_header());
  }

  // optional bytes message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.Package)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Package* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Package>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.Package)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.Package)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.auth_id() != 0) {
    set_auth_id(from.auth_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.message_header() != 0) {
    set_message_header(from.message_header());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Package::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {

  return true;
}

void Package::Swap(Package* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Package::InternalSwap(Package* other) {
  std::swap(auth_id_, other->auth_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(message_header_, other->message_header_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Package::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Package_descriptor_;
  metadata.reflection = Package_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Package

// optional int64 auth_id = 1;
void Package::clear_auth_id() {
  auth_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Package::auth_id() const {
  // @@protoc_insertion_point(field_get:zproto.Package.auth_id)
  return auth_id_;
}
 void Package::set_auth_id(::google::protobuf::int64 value) {
  
  auth_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.Package.auth_id)
}

// optional int64 session_id = 2;
void Package::clear_session_id() {
  session_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Package::session_id() const {
  // @@protoc_insertion_point(field_get:zproto.Package.session_id)
  return session_id_;
}
 void Package::set_session_id(::google::protobuf::int64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.Package.session_id)
}

// optional int32 message_header = 3;
void Package::clear_message_header() {
  message_header_ = 0;
}
 ::google::protobuf::int32 Package::message_header() const {
  // @@protoc_insertion_point(field_get:zproto.Package.message_header)
  return message_header_;
}
 void Package::set_message_header(::google::protobuf::int32 value) {
  
  message_header_ = value;
  // @@protoc_insertion_point(field_set:zproto.Package.message_header)
}

// optional bytes message = 4;
void Package::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Package::message() const {
  // @@protoc_insertion_point(field_get:zproto.Package.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Package::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Package.message)
}
 void Package::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Package.message)
}
 void Package::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Package.message)
}
 ::std::string* Package::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Package.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Package::release_message() {
  // @@protoc_insertion_point(field_release:zproto.Package.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Package::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zproto.Package.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlainTextMessage::kMessageIdFieldNumber;
const int PlainTextMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlainTextMessage::PlainTextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.PlainTextMessage)
}

void PlainTextMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlainTextMessage::PlainTextMessage(const PlainTextMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.PlainTextMessage)
}

void PlainTextMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PlainTextMessage::~PlainTextMessage() {
  // @@protoc_insertion_point(destructor:zproto.PlainTextMessage)
  SharedDtor();
}

void PlainTextMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlainTextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlainTextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlainTextMessage_descriptor_;
}

const PlainTextMessage& PlainTextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

PlainTextMessage* PlainTextMessage::default_instance_ = NULL;

PlainTextMessage* PlainTextMessage::New(::google::protobuf::Arena* arena) const {
  PlainTextMessage* n = new PlainTextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlainTextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.PlainTextMessage)
  message_id_ = GOOGLE_LONGLONG(0);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlainTextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.PlainTextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional bytes message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.PlainTextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.PlainTextMessage)
  return false;
#undef DO_
}

void PlainTextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.PlainTextMessage)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // optional bytes message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.PlainTextMessage)
}

::google::protobuf::uint8* PlainTextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.PlainTextMessage)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // optional bytes message = 2;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.PlainTextMessage)
  return target;
}

int PlainTextMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.PlainTextMessage)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // optional bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlainTextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.PlainTextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlainTextMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlainTextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.PlainTextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.PlainTextMessage)
    MergeFrom(*source);
  }
}

void PlainTextMessage::MergeFrom(const PlainTextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.PlainTextMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void PlainTextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.PlainTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainTextMessage::CopyFrom(const PlainTextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.PlainTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainTextMessage::IsInitialized() const {

  return true;
}

void PlainTextMessage::Swap(PlainTextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlainTextMessage::InternalSwap(PlainTextMessage* other) {
  std::swap(message_id_, other->message_id_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlainTextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlainTextMessage_descriptor_;
  metadata.reflection = PlainTextMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlainTextMessage

// optional int64 message_id = 1;
void PlainTextMessage::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlainTextMessage::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.PlainTextMessage.message_id)
  return message_id_;
}
 void PlainTextMessage::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.PlainTextMessage.message_id)
}

// optional bytes message = 2;
void PlainTextMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlainTextMessage::message() const {
  // @@protoc_insertion_point(field_get:zproto.PlainTextMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlainTextMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.PlainTextMessage.message)
}
 void PlainTextMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.PlainTextMessage.message)
}
 void PlainTextMessage::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.PlainTextMessage.message)
}
 ::std::string* PlainTextMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:zproto.PlainTextMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlainTextMessage::release_message() {
  // @@protoc_insertion_point(field_release:zproto.PlainTextMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlainTextMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:zproto.PlainTextMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncryptedMessage::kSeqNumberFieldNumber;
const int EncryptedMessage::kEncryptedPackageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncryptedMessage::EncryptedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.EncryptedMessage)
}

void EncryptedMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EncryptedMessage::EncryptedMessage(const EncryptedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.EncryptedMessage)
}

void EncryptedMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seq_number_ = GOOGLE_LONGLONG(0);
  encrypted_package_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EncryptedMessage::~EncryptedMessage() {
  // @@protoc_insertion_point(destructor:zproto.EncryptedMessage)
  SharedDtor();
}

void EncryptedMessage::SharedDtor() {
  encrypted_package_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EncryptedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedMessage_descriptor_;
}

const EncryptedMessage& EncryptedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

EncryptedMessage* EncryptedMessage::default_instance_ = NULL;

EncryptedMessage* EncryptedMessage::New(::google::protobuf::Arena* arena) const {
  EncryptedMessage* n = new EncryptedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.EncryptedMessage)
  seq_number_ = GOOGLE_LONGLONG(0);
  encrypted_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EncryptedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.EncryptedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 seq_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_encrypted_package;
        break;
      }

      // optional bytes encrypted_package = 2;
      case 2: {
        if (tag == 18) {
         parse_encrypted_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_package()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.EncryptedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.EncryptedMessage)
  return false;
#undef DO_
}

void EncryptedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.EncryptedMessage)
  // optional int64 seq_number = 1;
  if (this->seq_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seq_number(), output);
  }

  // optional bytes encrypted_package = 2;
  if (this->encrypted_package().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encrypted_package(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.EncryptedMessage)
}

::google::protobuf::uint8* EncryptedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.EncryptedMessage)
  // optional int64 seq_number = 1;
  if (this->seq_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seq_number(), target);
  }

  // optional bytes encrypted_package = 2;
  if (this->encrypted_package().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encrypted_package(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.EncryptedMessage)
  return target;
}

int EncryptedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.EncryptedMessage)
  int total_size = 0;

  // optional int64 seq_number = 1;
  if (this->seq_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq_number());
  }

  // optional bytes encrypted_package = 2;
  if (this->encrypted_package().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_package());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.EncryptedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EncryptedMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EncryptedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.EncryptedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.EncryptedMessage)
    MergeFrom(*source);
  }
}

void EncryptedMessage::MergeFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.EncryptedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.seq_number() != 0) {
    set_seq_number(from.seq_number());
  }
  if (from.encrypted_package().size() > 0) {

    encrypted_package_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_package_);
  }
}

void EncryptedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.EncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedMessage::CopyFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.EncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedMessage::IsInitialized() const {

  return true;
}

void EncryptedMessage::Swap(EncryptedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncryptedMessage::InternalSwap(EncryptedMessage* other) {
  std::swap(seq_number_, other->seq_number_);
  encrypted_package_.Swap(&other->encrypted_package_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncryptedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedMessage_descriptor_;
  metadata.reflection = EncryptedMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncryptedMessage

// optional int64 seq_number = 1;
void EncryptedMessage::clear_seq_number() {
  seq_number_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EncryptedMessage::seq_number() const {
  // @@protoc_insertion_point(field_get:zproto.EncryptedMessage.seq_number)
  return seq_number_;
}
 void EncryptedMessage::set_seq_number(::google::protobuf::int64 value) {
  
  seq_number_ = value;
  // @@protoc_insertion_point(field_set:zproto.EncryptedMessage.seq_number)
}

// optional bytes encrypted_package = 2;
void EncryptedMessage::clear_encrypted_package() {
  encrypted_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EncryptedMessage::encrypted_package() const {
  // @@protoc_insertion_point(field_get:zproto.EncryptedMessage.encrypted_package)
  return encrypted_package_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedMessage::set_encrypted_package(const ::std::string& value) {
  
  encrypted_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EncryptedMessage.encrypted_package)
}
 void EncryptedMessage::set_encrypted_package(const char* value) {
  
  encrypted_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EncryptedMessage.encrypted_package)
}
 void EncryptedMessage::set_encrypted_package(const void* value, size_t size) {
  
  encrypted_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EncryptedMessage.encrypted_package)
}
 ::std::string* EncryptedMessage::mutable_encrypted_package() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EncryptedMessage.encrypted_package)
  return encrypted_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EncryptedMessage::release_encrypted_package() {
  // @@protoc_insertion_point(field_release:zproto.EncryptedMessage.encrypted_package)
  
  return encrypted_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EncryptedMessage::set_allocated_encrypted_package(::std::string* encrypted_package) {
  if (encrypted_package != NULL) {
    
  } else {
    
  }
  encrypted_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_package);
  // @@protoc_insertion_point(field_set_allocated:zproto.EncryptedMessage.encrypted_package)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Drop::kMessageIdFieldNumber;
const int Drop::kErrorTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Drop::Drop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.Drop)
}

void Drop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Drop::Drop(const Drop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.Drop)
}

void Drop::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  error_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Drop::~Drop() {
  // @@protoc_insertion_point(destructor:zproto.Drop)
  SharedDtor();
}

void Drop::SharedDtor() {
  error_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Drop_descriptor_;
}

const Drop& Drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

Drop* Drop::default_instance_ = NULL;

Drop* Drop::New(::google::protobuf::Arena* arena) const {
  Drop* n = new Drop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Drop::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.Drop)
  message_id_ = GOOGLE_LONGLONG(0);
  error_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.Drop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_tag;
        break;
      }

      // optional string error_tag = 2;
      case 2: {
        if (tag == 18) {
         parse_error_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_tag().data(), this->error_tag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zproto.Drop.error_tag"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.Drop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.Drop)
  return false;
#undef DO_
}

void Drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.Drop)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // optional string error_tag = 2;
  if (this->error_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_tag().data(), this->error_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zproto.Drop.error_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_tag(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.Drop)
}

::google::protobuf::uint8* Drop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.Drop)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // optional string error_tag = 2;
  if (this->error_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_tag().data(), this->error_tag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zproto.Drop.error_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_tag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.Drop)
  return target;
}

int Drop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.Drop)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // optional string error_tag = 2;
  if (this->error_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_tag());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.Drop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Drop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Drop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.Drop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.Drop)
    MergeFrom(*source);
  }
}

void Drop::MergeFrom(const Drop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.Drop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.error_tag().size() > 0) {

    error_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_tag_);
  }
}

void Drop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.Drop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drop::CopyFrom(const Drop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.Drop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drop::IsInitialized() const {

  return true;
}

void Drop::Swap(Drop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Drop::InternalSwap(Drop* other) {
  std::swap(message_id_, other->message_id_);
  error_tag_.Swap(&other->error_tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Drop_descriptor_;
  metadata.reflection = Drop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Drop

// optional int64 message_id = 1;
void Drop::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Drop::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.Drop.message_id)
  return message_id_;
}
 void Drop::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.Drop.message_id)
}

// optional string error_tag = 2;
void Drop::clear_error_tag() {
  error_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Drop::error_tag() const {
  // @@protoc_insertion_point(field_get:zproto.Drop.error_tag)
  return error_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Drop::set_error_tag(const ::std::string& value) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Drop.error_tag)
}
 void Drop::set_error_tag(const char* value) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Drop.error_tag)
}
 void Drop::set_error_tag(const char* value, size_t size) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Drop.error_tag)
}
 ::std::string* Drop::mutable_error_tag() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Drop.error_tag)
  return error_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Drop::release_error_tag() {
  // @@protoc_insertion_point(field_release:zproto.Drop.error_tag)
  
  return error_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Drop::set_allocated_error_tag(::std::string* error_tag) {
  if (error_tag != NULL) {
    
  } else {
    
  }
  error_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_tag);
  // @@protoc_insertion_point(field_set_allocated:zproto.Drop.error_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAuthId::RequestAuthId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.RequestAuthId)
}

void RequestAuthId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestAuthId::RequestAuthId(const RequestAuthId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.RequestAuthId)
}

void RequestAuthId::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RequestAuthId::~RequestAuthId() {
  // @@protoc_insertion_point(destructor:zproto.RequestAuthId)
  SharedDtor();
}

void RequestAuthId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAuthId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAuthId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAuthId_descriptor_;
}

const RequestAuthId& RequestAuthId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

RequestAuthId* RequestAuthId::default_instance_ = NULL;

RequestAuthId* RequestAuthId::New(::google::protobuf::Arena* arena) const {
  RequestAuthId* n = new RequestAuthId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestAuthId::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.RequestAuthId)
}

bool RequestAuthId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.RequestAuthId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.RequestAuthId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.RequestAuthId)
  return false;
#undef DO_
}

void RequestAuthId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.RequestAuthId)
  // @@protoc_insertion_point(serialize_end:zproto.RequestAuthId)
}

::google::protobuf::uint8* RequestAuthId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.RequestAuthId)
  // @@protoc_insertion_point(serialize_to_array_end:zproto.RequestAuthId)
  return target;
}

int RequestAuthId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.RequestAuthId)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAuthId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.RequestAuthId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestAuthId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAuthId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.RequestAuthId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.RequestAuthId)
    MergeFrom(*source);
  }
}

void RequestAuthId::MergeFrom(const RequestAuthId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.RequestAuthId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RequestAuthId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.RequestAuthId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAuthId::CopyFrom(const RequestAuthId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.RequestAuthId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAuthId::IsInitialized() const {

  return true;
}

void RequestAuthId::Swap(RequestAuthId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAuthId::InternalSwap(RequestAuthId* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestAuthId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAuthId_descriptor_;
  metadata.reflection = RequestAuthId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestAuthId

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAuthId::kAuthIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAuthId::ResponseAuthId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ResponseAuthId)
}

void ResponseAuthId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseAuthId::ResponseAuthId(const ResponseAuthId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ResponseAuthId)
}

void ResponseAuthId::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  auth_id_ = GOOGLE_LONGLONG(0);
}

ResponseAuthId::~ResponseAuthId() {
  // @@protoc_insertion_point(destructor:zproto.ResponseAuthId)
  SharedDtor();
}

void ResponseAuthId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseAuthId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAuthId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseAuthId_descriptor_;
}

const ResponseAuthId& ResponseAuthId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ResponseAuthId* ResponseAuthId::default_instance_ = NULL;

ResponseAuthId* ResponseAuthId::New(::google::protobuf::Arena* arena) const {
  ResponseAuthId* n = new ResponseAuthId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseAuthId::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ResponseAuthId)
  auth_id_ = GOOGLE_LONGLONG(0);
}

bool ResponseAuthId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ResponseAuthId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 auth_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auth_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ResponseAuthId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ResponseAuthId)
  return false;
#undef DO_
}

void ResponseAuthId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ResponseAuthId)
  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->auth_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ResponseAuthId)
}

::google::protobuf::uint8* ResponseAuthId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ResponseAuthId)
  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->auth_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ResponseAuthId)
  return target;
}

int ResponseAuthId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ResponseAuthId)
  int total_size = 0;

  // optional int64 auth_id = 1;
  if (this->auth_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auth_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAuthId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ResponseAuthId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseAuthId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAuthId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ResponseAuthId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ResponseAuthId)
    MergeFrom(*source);
  }
}

void ResponseAuthId::MergeFrom(const ResponseAuthId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ResponseAuthId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.auth_id() != 0) {
    set_auth_id(from.auth_id());
  }
}

void ResponseAuthId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ResponseAuthId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAuthId::CopyFrom(const ResponseAuthId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ResponseAuthId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAuthId::IsInitialized() const {

  return true;
}

void ResponseAuthId::Swap(ResponseAuthId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAuthId::InternalSwap(ResponseAuthId* other) {
  std::swap(auth_id_, other->auth_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseAuthId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseAuthId_descriptor_;
  metadata.reflection = ResponseAuthId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseAuthId

// optional int64 auth_id = 1;
void ResponseAuthId::clear_auth_id() {
  auth_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseAuthId::auth_id() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseAuthId.auth_id)
  return auth_id_;
}
 void ResponseAuthId::set_auth_id(::google::protobuf::int64 value) {
  
  auth_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ResponseAuthId.auth_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStartAuth::kRandomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStartAuth::RequestStartAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.RequestStartAuth)
}

void RequestStartAuth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestStartAuth::RequestStartAuth(const RequestStartAuth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.RequestStartAuth)
}

void RequestStartAuth::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  random_id_ = GOOGLE_LONGLONG(0);
}

RequestStartAuth::~RequestStartAuth() {
  // @@protoc_insertion_point(destructor:zproto.RequestStartAuth)
  SharedDtor();
}

void RequestStartAuth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStartAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStartAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStartAuth_descriptor_;
}

const RequestStartAuth& RequestStartAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

RequestStartAuth* RequestStartAuth::default_instance_ = NULL;

RequestStartAuth* RequestStartAuth::New(::google::protobuf::Arena* arena) const {
  RequestStartAuth* n = new RequestStartAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestStartAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.RequestStartAuth)
  random_id_ = GOOGLE_LONGLONG(0);
}

bool RequestStartAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.RequestStartAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 random_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.RequestStartAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.RequestStartAuth)
  return false;
#undef DO_
}

void RequestStartAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.RequestStartAuth)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->random_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.RequestStartAuth)
}

::google::protobuf::uint8* RequestStartAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.RequestStartAuth)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->random_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.RequestStartAuth)
  return target;
}

int RequestStartAuth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.RequestStartAuth)
  int total_size = 0;

  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->random_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.RequestStartAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestStartAuth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestStartAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.RequestStartAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.RequestStartAuth)
    MergeFrom(*source);
  }
}

void RequestStartAuth::MergeFrom(const RequestStartAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.RequestStartAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.random_id() != 0) {
    set_random_id(from.random_id());
  }
}

void RequestStartAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.RequestStartAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartAuth::CopyFrom(const RequestStartAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.RequestStartAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartAuth::IsInitialized() const {

  return true;
}

void RequestStartAuth::Swap(RequestStartAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStartAuth::InternalSwap(RequestStartAuth* other) {
  std::swap(random_id_, other->random_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestStartAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStartAuth_descriptor_;
  metadata.reflection = RequestStartAuth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestStartAuth

// optional int64 random_id = 1;
void RequestStartAuth::clear_random_id() {
  random_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestStartAuth::random_id() const {
  // @@protoc_insertion_point(field_get:zproto.RequestStartAuth.random_id)
  return random_id_;
}
 void RequestStartAuth::set_random_id(::google::protobuf::int64 value) {
  
  random_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RequestStartAuth.random_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseStartAuth::kRandomIdFieldNumber;
const int ResponseStartAuth::kAvailableKeysFieldNumber;
const int ResponseStartAuth::kServerNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseStartAuth::ResponseStartAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ResponseStartAuth)
}

void ResponseStartAuth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseStartAuth::ResponseStartAuth(const ResponseStartAuth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ResponseStartAuth)
}

void ResponseStartAuth::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  random_id_ = GOOGLE_LONGLONG(0);
  server_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseStartAuth::~ResponseStartAuth() {
  // @@protoc_insertion_point(destructor:zproto.ResponseStartAuth)
  SharedDtor();
}

void ResponseStartAuth::SharedDtor() {
  server_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseStartAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStartAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStartAuth_descriptor_;
}

const ResponseStartAuth& ResponseStartAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ResponseStartAuth* ResponseStartAuth::default_instance_ = NULL;

ResponseStartAuth* ResponseStartAuth::New(::google::protobuf::Arena* arena) const {
  ResponseStartAuth* n = new ResponseStartAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseStartAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ResponseStartAuth)
  random_id_ = GOOGLE_LONGLONG(0);
  server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_keys_.Clear();
}

bool ResponseStartAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ResponseStartAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 random_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_available_keys;
        break;
      }

      // repeated int64 available_keys = 2;
      case 2: {
        if (tag == 18) {
         parse_available_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_available_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_available_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_nonce;
        break;
      }

      // optional bytes server_nonce = 3;
      case 3: {
        if (tag == 26) {
         parse_server_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ResponseStartAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ResponseStartAuth)
  return false;
#undef DO_
}

void ResponseStartAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ResponseStartAuth)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->random_id(), output);
  }

  // repeated int64 available_keys = 2;
  if (this->available_keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_available_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->available_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->available_keys(i), output);
  }

  // optional bytes server_nonce = 3;
  if (this->server_nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->server_nonce(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ResponseStartAuth)
}

::google::protobuf::uint8* ResponseStartAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ResponseStartAuth)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->random_id(), target);
  }

  // repeated int64 available_keys = 2;
  if (this->available_keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _available_keys_cached_byte_size_, target);
  }
  for (int i = 0; i < this->available_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->available_keys(i), target);
  }

  // optional bytes server_nonce = 3;
  if (this->server_nonce().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_nonce(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ResponseStartAuth)
  return target;
}

int ResponseStartAuth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ResponseStartAuth)
  int total_size = 0;

  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->random_id());
  }

  // optional bytes server_nonce = 3;
  if (this->server_nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_nonce());
  }

  // repeated int64 available_keys = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->available_keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->available_keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _available_keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStartAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ResponseStartAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseStartAuth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseStartAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ResponseStartAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ResponseStartAuth)
    MergeFrom(*source);
  }
}

void ResponseStartAuth::MergeFrom(const ResponseStartAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ResponseStartAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  available_keys_.MergeFrom(from.available_keys_);
  if (from.random_id() != 0) {
    set_random_id(from.random_id());
  }
  if (from.server_nonce().size() > 0) {

    server_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_nonce_);
  }
}

void ResponseStartAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ResponseStartAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStartAuth::CopyFrom(const ResponseStartAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ResponseStartAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartAuth::IsInitialized() const {

  return true;
}

void ResponseStartAuth::Swap(ResponseStartAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseStartAuth::InternalSwap(ResponseStartAuth* other) {
  std::swap(random_id_, other->random_id_);
  available_keys_.UnsafeArenaSwap(&other->available_keys_);
  server_nonce_.Swap(&other->server_nonce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseStartAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStartAuth_descriptor_;
  metadata.reflection = ResponseStartAuth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseStartAuth

// optional int64 random_id = 1;
void ResponseStartAuth::clear_random_id() {
  random_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseStartAuth::random_id() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseStartAuth.random_id)
  return random_id_;
}
 void ResponseStartAuth::set_random_id(::google::protobuf::int64 value) {
  
  random_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ResponseStartAuth.random_id)
}

// repeated int64 available_keys = 2;
int ResponseStartAuth::available_keys_size() const {
  return available_keys_.size();
}
void ResponseStartAuth::clear_available_keys() {
  available_keys_.Clear();
}
 ::google::protobuf::int64 ResponseStartAuth::available_keys(int index) const {
  // @@protoc_insertion_point(field_get:zproto.ResponseStartAuth.available_keys)
  return available_keys_.Get(index);
}
 void ResponseStartAuth::set_available_keys(int index, ::google::protobuf::int64 value) {
  available_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.ResponseStartAuth.available_keys)
}
 void ResponseStartAuth::add_available_keys(::google::protobuf::int64 value) {
  available_keys_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.ResponseStartAuth.available_keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResponseStartAuth::available_keys() const {
  // @@protoc_insertion_point(field_list:zproto.ResponseStartAuth.available_keys)
  return available_keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResponseStartAuth::mutable_available_keys() {
  // @@protoc_insertion_point(field_mutable_list:zproto.ResponseStartAuth.available_keys)
  return &available_keys_;
}

// optional bytes server_nonce = 3;
void ResponseStartAuth::clear_server_nonce() {
  server_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseStartAuth::server_nonce() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseStartAuth.server_nonce)
  return server_nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseStartAuth::set_server_nonce(const ::std::string& value) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ResponseStartAuth.server_nonce)
}
 void ResponseStartAuth::set_server_nonce(const char* value) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ResponseStartAuth.server_nonce)
}
 void ResponseStartAuth::set_server_nonce(const void* value, size_t size) {
  
  server_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ResponseStartAuth.server_nonce)
}
 ::std::string* ResponseStartAuth::mutable_server_nonce() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ResponseStartAuth.server_nonce)
  return server_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseStartAuth::release_server_nonce() {
  // @@protoc_insertion_point(field_release:zproto.ResponseStartAuth.server_nonce)
  
  return server_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseStartAuth::set_allocated_server_nonce(::std::string* server_nonce) {
  if (server_nonce != NULL) {
    
  } else {
    
  }
  server_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_nonce);
  // @@protoc_insertion_point(field_set_allocated:zproto.ResponseStartAuth.server_nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestGetServerKey::kKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestGetServerKey::RequestGetServerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.RequestGetServerKey)
}

void RequestGetServerKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestGetServerKey::RequestGetServerKey(const RequestGetServerKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.RequestGetServerKey)
}

void RequestGetServerKey::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_id_ = GOOGLE_LONGLONG(0);
}

RequestGetServerKey::~RequestGetServerKey() {
  // @@protoc_insertion_point(destructor:zproto.RequestGetServerKey)
  SharedDtor();
}

void RequestGetServerKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGetServerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGetServerKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGetServerKey_descriptor_;
}

const RequestGetServerKey& RequestGetServerKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

RequestGetServerKey* RequestGetServerKey::default_instance_ = NULL;

RequestGetServerKey* RequestGetServerKey::New(::google::protobuf::Arena* arena) const {
  RequestGetServerKey* n = new RequestGetServerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestGetServerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.RequestGetServerKey)
  key_id_ = GOOGLE_LONGLONG(0);
}

bool RequestGetServerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.RequestGetServerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.RequestGetServerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.RequestGetServerKey)
  return false;
#undef DO_
}

void RequestGetServerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.RequestGetServerKey)
  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.RequestGetServerKey)
}

::google::protobuf::uint8* RequestGetServerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.RequestGetServerKey)
  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.RequestGetServerKey)
  return target;
}

int RequestGetServerKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.RequestGetServerKey)
  int total_size = 0;

  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetServerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.RequestGetServerKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestGetServerKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestGetServerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.RequestGetServerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.RequestGetServerKey)
    MergeFrom(*source);
  }
}

void RequestGetServerKey::MergeFrom(const RequestGetServerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.RequestGetServerKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
}

void RequestGetServerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.RequestGetServerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetServerKey::CopyFrom(const RequestGetServerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.RequestGetServerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetServerKey::IsInitialized() const {

  return true;
}

void RequestGetServerKey::Swap(RequestGetServerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestGetServerKey::InternalSwap(RequestGetServerKey* other) {
  std::swap(key_id_, other->key_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestGetServerKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGetServerKey_descriptor_;
  metadata.reflection = RequestGetServerKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestGetServerKey

// optional int64 key_id = 1;
void RequestGetServerKey::clear_key_id() {
  key_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestGetServerKey::key_id() const {
  // @@protoc_insertion_point(field_get:zproto.RequestGetServerKey.key_id)
  return key_id_;
}
 void RequestGetServerKey::set_key_id(::google::protobuf::int64 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RequestGetServerKey.key_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGetServerKey::kKeyIdFieldNumber;
const int ResponseGetServerKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGetServerKey::ResponseGetServerKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ResponseGetServerKey)
}

void ResponseGetServerKey::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseGetServerKey::ResponseGetServerKey(const ResponseGetServerKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ResponseGetServerKey)
}

void ResponseGetServerKey::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_id_ = GOOGLE_LONGLONG(0);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseGetServerKey::~ResponseGetServerKey() {
  // @@protoc_insertion_point(destructor:zproto.ResponseGetServerKey)
  SharedDtor();
}

void ResponseGetServerKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseGetServerKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGetServerKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGetServerKey_descriptor_;
}

const ResponseGetServerKey& ResponseGetServerKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ResponseGetServerKey* ResponseGetServerKey::default_instance_ = NULL;

ResponseGetServerKey* ResponseGetServerKey::New(::google::protobuf::Arena* arena) const {
  ResponseGetServerKey* n = new ResponseGetServerKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseGetServerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ResponseGetServerKey)
  key_id_ = GOOGLE_LONGLONG(0);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseGetServerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ResponseGetServerKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ResponseGetServerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ResponseGetServerKey)
  return false;
#undef DO_
}

void ResponseGetServerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ResponseGetServerKey)
  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key_id(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ResponseGetServerKey)
}

::google::protobuf::uint8* ResponseGetServerKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ResponseGetServerKey)
  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key_id(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ResponseGetServerKey)
  return target;
}

int ResponseGetServerKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ResponseGetServerKey)
  int total_size = 0;

  // optional int64 key_id = 1;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key_id());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetServerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ResponseGetServerKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseGetServerKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGetServerKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ResponseGetServerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ResponseGetServerKey)
    MergeFrom(*source);
  }
}

void ResponseGetServerKey::MergeFrom(const ResponseGetServerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ResponseGetServerKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void ResponseGetServerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ResponseGetServerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGetServerKey::CopyFrom(const ResponseGetServerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ResponseGetServerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetServerKey::IsInitialized() const {

  return true;
}

void ResponseGetServerKey::Swap(ResponseGetServerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGetServerKey::InternalSwap(ResponseGetServerKey* other) {
  std::swap(key_id_, other->key_id_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseGetServerKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGetServerKey_descriptor_;
  metadata.reflection = ResponseGetServerKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseGetServerKey

// optional int64 key_id = 1;
void ResponseGetServerKey::clear_key_id() {
  key_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseGetServerKey::key_id() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseGetServerKey.key_id)
  return key_id_;
}
 void ResponseGetServerKey::set_key_id(::google::protobuf::int64 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ResponseGetServerKey.key_id)
}

// optional bytes key = 2;
void ResponseGetServerKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseGetServerKey::key() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseGetServerKey.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGetServerKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ResponseGetServerKey.key)
}
 void ResponseGetServerKey::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ResponseGetServerKey.key)
}
 void ResponseGetServerKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ResponseGetServerKey.key)
}
 ::std::string* ResponseGetServerKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ResponseGetServerKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGetServerKey::release_key() {
  // @@protoc_insertion_point(field_release:zproto.ResponseGetServerKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGetServerKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:zproto.ResponseGetServerKey.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDH::kRandomIdFieldNumber;
const int RequestDH::kKeyIdFieldNumber;
const int RequestDH::kClientNonceFieldNumber;
const int RequestDH::kClientKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDH::RequestDH()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.RequestDH)
}

void RequestDH::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestDH::RequestDH(const RequestDH& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.RequestDH)
}

void RequestDH::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  random_id_ = GOOGLE_LONGLONG(0);
  key_id_ = GOOGLE_LONGLONG(0);
  client_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestDH::~RequestDH() {
  // @@protoc_insertion_point(destructor:zproto.RequestDH)
  SharedDtor();
}

void RequestDH::SharedDtor() {
  client_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestDH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDH_descriptor_;
}

const RequestDH& RequestDH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

RequestDH* RequestDH::default_instance_ = NULL;

RequestDH* RequestDH::New(::google::protobuf::Arena* arena) const {
  RequestDH* n = new RequestDH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDH::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.RequestDH)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestDH, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestDH*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(random_id_, key_id_);
  client_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RequestDH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.RequestDH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 random_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_id;
        break;
      }

      // optional int64 key_id = 2;
      case 2: {
        if (tag == 16) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_nonce;
        break;
      }

      // optional bytes client_nonce = 3;
      case 3: {
        if (tag == 26) {
         parse_client_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_key;
        break;
      }

      // optional bytes client_key = 4;
      case 4: {
        if (tag == 34) {
         parse_client_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.RequestDH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.RequestDH)
  return false;
#undef DO_
}

void RequestDH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.RequestDH)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->random_id(), output);
  }

  // optional int64 key_id = 2;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->key_id(), output);
  }

  // optional bytes client_nonce = 3;
  if (this->client_nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->client_nonce(), output);
  }

  // optional bytes client_key = 4;
  if (this->client_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->client_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.RequestDH)
}

::google::protobuf::uint8* RequestDH::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.RequestDH)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->random_id(), target);
  }

  // optional int64 key_id = 2;
  if (this->key_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->key_id(), target);
  }

  // optional bytes client_nonce = 3;
  if (this->client_nonce().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->client_nonce(), target);
  }

  // optional bytes client_key = 4;
  if (this->client_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->client_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.RequestDH)
  return target;
}

int RequestDH::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.RequestDH)
  int total_size = 0;

  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->random_id());
  }

  // optional int64 key_id = 2;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->key_id());
  }

  // optional bytes client_nonce = 3;
  if (this->client_nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_nonce());
  }

  // optional bytes client_key = 4;
  if (this->client_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.RequestDH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestDH* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDH>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.RequestDH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.RequestDH)
    MergeFrom(*source);
  }
}

void RequestDH::MergeFrom(const RequestDH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.RequestDH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.random_id() != 0) {
    set_random_id(from.random_id());
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
  if (from.client_nonce().size() > 0) {

    client_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_nonce_);
  }
  if (from.client_key().size() > 0) {

    client_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_key_);
  }
}

void RequestDH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.RequestDH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDH::CopyFrom(const RequestDH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.RequestDH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDH::IsInitialized() const {

  return true;
}

void RequestDH::Swap(RequestDH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDH::InternalSwap(RequestDH* other) {
  std::swap(random_id_, other->random_id_);
  std::swap(key_id_, other->key_id_);
  client_nonce_.Swap(&other->client_nonce_);
  client_key_.Swap(&other->client_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDH_descriptor_;
  metadata.reflection = RequestDH_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDH

// optional int64 random_id = 1;
void RequestDH::clear_random_id() {
  random_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestDH::random_id() const {
  // @@protoc_insertion_point(field_get:zproto.RequestDH.random_id)
  return random_id_;
}
 void RequestDH::set_random_id(::google::protobuf::int64 value) {
  
  random_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RequestDH.random_id)
}

// optional int64 key_id = 2;
void RequestDH::clear_key_id() {
  key_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestDH::key_id() const {
  // @@protoc_insertion_point(field_get:zproto.RequestDH.key_id)
  return key_id_;
}
 void RequestDH::set_key_id(::google::protobuf::int64 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RequestDH.key_id)
}

// optional bytes client_nonce = 3;
void RequestDH::clear_client_nonce() {
  client_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestDH::client_nonce() const {
  // @@protoc_insertion_point(field_get:zproto.RequestDH.client_nonce)
  return client_nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDH::set_client_nonce(const ::std::string& value) {
  
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RequestDH.client_nonce)
}
 void RequestDH::set_client_nonce(const char* value) {
  
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RequestDH.client_nonce)
}
 void RequestDH::set_client_nonce(const void* value, size_t size) {
  
  client_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RequestDH.client_nonce)
}
 ::std::string* RequestDH::mutable_client_nonce() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RequestDH.client_nonce)
  return client_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestDH::release_client_nonce() {
  // @@protoc_insertion_point(field_release:zproto.RequestDH.client_nonce)
  
  return client_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDH::set_allocated_client_nonce(::std::string* client_nonce) {
  if (client_nonce != NULL) {
    
  } else {
    
  }
  client_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_nonce);
  // @@protoc_insertion_point(field_set_allocated:zproto.RequestDH.client_nonce)
}

// optional bytes client_key = 4;
void RequestDH::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestDH::client_key() const {
  // @@protoc_insertion_point(field_get:zproto.RequestDH.client_key)
  return client_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDH::set_client_key(const ::std::string& value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RequestDH.client_key)
}
 void RequestDH::set_client_key(const char* value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RequestDH.client_key)
}
 void RequestDH::set_client_key(const void* value, size_t size) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RequestDH.client_key)
}
 ::std::string* RequestDH::mutable_client_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RequestDH.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestDH::release_client_key() {
  // @@protoc_insertion_point(field_release:zproto.RequestDH.client_key)
  
  return client_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDH::set_allocated_client_key(::std::string* client_key) {
  if (client_key != NULL) {
    
  } else {
    
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:zproto.RequestDH.client_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDoDH::kRandomIdFieldNumber;
const int ResponseDoDH::kVerifyFieldNumber;
const int ResponseDoDH::kVerifySignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDoDH::ResponseDoDH()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ResponseDoDH)
}

void ResponseDoDH::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseDoDH::ResponseDoDH(const ResponseDoDH& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ResponseDoDH)
}

void ResponseDoDH::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  random_id_ = GOOGLE_LONGLONG(0);
  verify_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseDoDH::~ResponseDoDH() {
  // @@protoc_insertion_point(destructor:zproto.ResponseDoDH)
  SharedDtor();
}

void ResponseDoDH::SharedDtor() {
  verify_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseDoDH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDoDH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDoDH_descriptor_;
}

const ResponseDoDH& ResponseDoDH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ResponseDoDH* ResponseDoDH::default_instance_ = NULL;

ResponseDoDH* ResponseDoDH::New(::google::protobuf::Arena* arena) const {
  ResponseDoDH* n = new ResponseDoDH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDoDH::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ResponseDoDH)
  random_id_ = GOOGLE_LONGLONG(0);
  verify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseDoDH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ResponseDoDH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 random_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_verify;
        break;
      }

      // optional bytes verify = 2;
      case 2: {
        if (tag == 18) {
         parse_verify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_verify_sign;
        break;
      }

      // optional bytes verify_sign = 3;
      case 3: {
        if (tag == 26) {
         parse_verify_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ResponseDoDH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ResponseDoDH)
  return false;
#undef DO_
}

void ResponseDoDH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ResponseDoDH)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->random_id(), output);
  }

  // optional bytes verify = 2;
  if (this->verify().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->verify(), output);
  }

  // optional bytes verify_sign = 3;
  if (this->verify_sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verify_sign(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ResponseDoDH)
}

::google::protobuf::uint8* ResponseDoDH::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ResponseDoDH)
  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->random_id(), target);
  }

  // optional bytes verify = 2;
  if (this->verify().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verify(), target);
  }

  // optional bytes verify_sign = 3;
  if (this->verify_sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->verify_sign(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ResponseDoDH)
  return target;
}

int ResponseDoDH::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ResponseDoDH)
  int total_size = 0;

  // optional int64 random_id = 1;
  if (this->random_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->random_id());
  }

  // optional bytes verify = 2;
  if (this->verify().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->verify());
  }

  // optional bytes verify_sign = 3;
  if (this->verify_sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->verify_sign());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDoDH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ResponseDoDH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseDoDH* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDoDH>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ResponseDoDH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ResponseDoDH)
    MergeFrom(*source);
  }
}

void ResponseDoDH::MergeFrom(const ResponseDoDH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ResponseDoDH)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.random_id() != 0) {
    set_random_id(from.random_id());
  }
  if (from.verify().size() > 0) {

    verify_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_);
  }
  if (from.verify_sign().size() > 0) {

    verify_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_sign_);
  }
}

void ResponseDoDH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ResponseDoDH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDoDH::CopyFrom(const ResponseDoDH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ResponseDoDH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDoDH::IsInitialized() const {

  return true;
}

void ResponseDoDH::Swap(ResponseDoDH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDoDH::InternalSwap(ResponseDoDH* other) {
  std::swap(random_id_, other->random_id_);
  verify_.Swap(&other->verify_);
  verify_sign_.Swap(&other->verify_sign_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDoDH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDoDH_descriptor_;
  metadata.reflection = ResponseDoDH_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDoDH

// optional int64 random_id = 1;
void ResponseDoDH::clear_random_id() {
  random_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseDoDH::random_id() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseDoDH.random_id)
  return random_id_;
}
 void ResponseDoDH::set_random_id(::google::protobuf::int64 value) {
  
  random_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ResponseDoDH.random_id)
}

// optional bytes verify = 2;
void ResponseDoDH::clear_verify() {
  verify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseDoDH::verify() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseDoDH.verify)
  return verify_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDoDH::set_verify(const ::std::string& value) {
  
  verify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ResponseDoDH.verify)
}
 void ResponseDoDH::set_verify(const char* value) {
  
  verify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ResponseDoDH.verify)
}
 void ResponseDoDH::set_verify(const void* value, size_t size) {
  
  verify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ResponseDoDH.verify)
}
 ::std::string* ResponseDoDH::mutable_verify() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ResponseDoDH.verify)
  return verify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseDoDH::release_verify() {
  // @@protoc_insertion_point(field_release:zproto.ResponseDoDH.verify)
  
  return verify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDoDH::set_allocated_verify(::std::string* verify) {
  if (verify != NULL) {
    
  } else {
    
  }
  verify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify);
  // @@protoc_insertion_point(field_set_allocated:zproto.ResponseDoDH.verify)
}

// optional bytes verify_sign = 3;
void ResponseDoDH::clear_verify_sign() {
  verify_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseDoDH::verify_sign() const {
  // @@protoc_insertion_point(field_get:zproto.ResponseDoDH.verify_sign)
  return verify_sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDoDH::set_verify_sign(const ::std::string& value) {
  
  verify_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ResponseDoDH.verify_sign)
}
 void ResponseDoDH::set_verify_sign(const char* value) {
  
  verify_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ResponseDoDH.verify_sign)
}
 void ResponseDoDH::set_verify_sign(const void* value, size_t size) {
  
  verify_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ResponseDoDH.verify_sign)
}
 ::std::string* ResponseDoDH::mutable_verify_sign() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ResponseDoDH.verify_sign)
  return verify_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseDoDH::release_verify_sign() {
  // @@protoc_insertion_point(field_release:zproto.ResponseDoDH.verify_sign)
  
  return verify_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDoDH::set_allocated_verify_sign(::std::string* verify_sign) {
  if (verify_sign != NULL) {
    
  } else {
    
  }
  verify_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_sign);
  // @@protoc_insertion_point(field_set_allocated:zproto.ResponseDoDH.verify_sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRpcRequest::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRpcRequest::ProtoRpcRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ProtoRpcRequest)
}

void ProtoRpcRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoRpcRequest::ProtoRpcRequest(const ProtoRpcRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ProtoRpcRequest)
}

void ProtoRpcRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProtoRpcRequest::~ProtoRpcRequest() {
  // @@protoc_insertion_point(destructor:zproto.ProtoRpcRequest)
  SharedDtor();
}

void ProtoRpcRequest::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProtoRpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRpcRequest_descriptor_;
}

const ProtoRpcRequest& ProtoRpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ProtoRpcRequest* ProtoRpcRequest::default_instance_ = NULL;

ProtoRpcRequest* ProtoRpcRequest::New(::google::protobuf::Arena* arena) const {
  ProtoRpcRequest* n = new ProtoRpcRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ProtoRpcRequest)
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProtoRpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ProtoRpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ProtoRpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ProtoRpcRequest)
  return false;
#undef DO_
}

void ProtoRpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ProtoRpcRequest)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ProtoRpcRequest)
}

::google::protobuf::uint8* ProtoRpcRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ProtoRpcRequest)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ProtoRpcRequest)
  return target;
}

int ProtoRpcRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ProtoRpcRequest)
  int total_size = 0;

  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ProtoRpcRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoRpcRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoRpcRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ProtoRpcRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ProtoRpcRequest)
    MergeFrom(*source);
  }
}

void ProtoRpcRequest::MergeFrom(const ProtoRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ProtoRpcRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void ProtoRpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ProtoRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRpcRequest::CopyFrom(const ProtoRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ProtoRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRpcRequest::IsInitialized() const {

  return true;
}

void ProtoRpcRequest::Swap(ProtoRpcRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRpcRequest::InternalSwap(ProtoRpcRequest* other) {
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoRpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRpcRequest_descriptor_;
  metadata.reflection = ProtoRpcRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoRpcRequest

// optional bytes payload = 1;
void ProtoRpcRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProtoRpcRequest::payload() const {
  // @@protoc_insertion_point(field_get:zproto.ProtoRpcRequest.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoRpcRequest::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ProtoRpcRequest.payload)
}
 void ProtoRpcRequest::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ProtoRpcRequest.payload)
}
 void ProtoRpcRequest::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ProtoRpcRequest.payload)
}
 ::std::string* ProtoRpcRequest::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ProtoRpcRequest.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProtoRpcRequest::release_payload() {
  // @@protoc_insertion_point(field_release:zproto.ProtoRpcRequest.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoRpcRequest::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:zproto.ProtoRpcRequest.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRpcResponse::kMessageIdFieldNumber;
const int ProtoRpcResponse::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRpcResponse::ProtoRpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ProtoRpcResponse)
}

void ProtoRpcResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoRpcResponse::ProtoRpcResponse(const ProtoRpcResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ProtoRpcResponse)
}

void ProtoRpcResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProtoRpcResponse::~ProtoRpcResponse() {
  // @@protoc_insertion_point(destructor:zproto.ProtoRpcResponse)
  SharedDtor();
}

void ProtoRpcResponse::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProtoRpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRpcResponse_descriptor_;
}

const ProtoRpcResponse& ProtoRpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ProtoRpcResponse* ProtoRpcResponse::default_instance_ = NULL;

ProtoRpcResponse* ProtoRpcResponse::New(::google::protobuf::Arena* arena) const {
  ProtoRpcResponse* n = new ProtoRpcResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ProtoRpcResponse)
  message_id_ = GOOGLE_LONGLONG(0);
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProtoRpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ProtoRpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ProtoRpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ProtoRpcResponse)
  return false;
#undef DO_
}

void ProtoRpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ProtoRpcResponse)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ProtoRpcResponse)
}

::google::protobuf::uint8* ProtoRpcResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ProtoRpcResponse)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ProtoRpcResponse)
  return target;
}

int ProtoRpcResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ProtoRpcResponse)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // optional bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ProtoRpcResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoRpcResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoRpcResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ProtoRpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ProtoRpcResponse)
    MergeFrom(*source);
  }
}

void ProtoRpcResponse::MergeFrom(const ProtoRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ProtoRpcResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void ProtoRpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ProtoRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRpcResponse::CopyFrom(const ProtoRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ProtoRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRpcResponse::IsInitialized() const {

  return true;
}

void ProtoRpcResponse::Swap(ProtoRpcResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRpcResponse::InternalSwap(ProtoRpcResponse* other) {
  std::swap(message_id_, other->message_id_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoRpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRpcResponse_descriptor_;
  metadata.reflection = ProtoRpcResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoRpcResponse

// optional int64 message_id = 1;
void ProtoRpcResponse::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ProtoRpcResponse::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.ProtoRpcResponse.message_id)
  return message_id_;
}
 void ProtoRpcResponse::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ProtoRpcResponse.message_id)
}

// optional bytes payload = 2;
void ProtoRpcResponse::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProtoRpcResponse::payload() const {
  // @@protoc_insertion_point(field_get:zproto.ProtoRpcResponse.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoRpcResponse::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ProtoRpcResponse.payload)
}
 void ProtoRpcResponse::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ProtoRpcResponse.payload)
}
 void ProtoRpcResponse::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ProtoRpcResponse.payload)
}
 ::std::string* ProtoRpcResponse::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ProtoRpcResponse.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProtoRpcResponse::release_payload() {
  // @@protoc_insertion_point(field_release:zproto.ProtoRpcResponse.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoRpcResponse::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:zproto.ProtoRpcResponse.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoPush::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoPush::ProtoPush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.ProtoPush)
}

void ProtoPush::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoPush::ProtoPush(const ProtoPush& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.ProtoPush)
}

void ProtoPush::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProtoPush::~ProtoPush() {
  // @@protoc_insertion_point(destructor:zproto.ProtoPush)
  SharedDtor();
}

void ProtoPush::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProtoPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPush_descriptor_;
}

const ProtoPush& ProtoPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

ProtoPush* ProtoPush::default_instance_ = NULL;

ProtoPush* ProtoPush::New(::google::protobuf::Arena* arena) const {
  ProtoPush* n = new ProtoPush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoPush::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.ProtoPush)
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProtoPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.ProtoPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.ProtoPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.ProtoPush)
  return false;
#undef DO_
}

void ProtoPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.ProtoPush)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.ProtoPush)
}

::google::protobuf::uint8* ProtoPush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.ProtoPush)
  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.ProtoPush)
  return target;
}

int ProtoPush::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.ProtoPush)
  int total_size = 0;

  // optional bytes payload = 1;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.ProtoPush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoPush* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoPush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.ProtoPush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.ProtoPush)
    MergeFrom(*source);
  }
}

void ProtoPush::MergeFrom(const ProtoPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.ProtoPush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void ProtoPush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.ProtoPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPush::CopyFrom(const ProtoPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.ProtoPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPush::IsInitialized() const {

  return true;
}

void ProtoPush::Swap(ProtoPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoPush::InternalSwap(ProtoPush* other) {
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPush_descriptor_;
  metadata.reflection = ProtoPush_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoPush

// optional bytes payload = 1;
void ProtoPush::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ProtoPush::payload() const {
  // @@protoc_insertion_point(field_get:zproto.ProtoPush.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoPush::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ProtoPush.payload)
}
 void ProtoPush::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ProtoPush.payload)
}
 void ProtoPush::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ProtoPush.payload)
}
 ::std::string* ProtoPush::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ProtoPush.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProtoPush::release_payload() {
  // @@protoc_insertion_point(field_release:zproto.ProtoPush.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProtoPush::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:zproto.ProtoPush.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageAck::kMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageAck::MessageAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.MessageAck)
}

void MessageAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageAck::MessageAck(const MessageAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.MessageAck)
}

void MessageAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MessageAck::~MessageAck() {
  // @@protoc_insertion_point(destructor:zproto.MessageAck)
  SharedDtor();
}

void MessageAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageAck_descriptor_;
}

const MessageAck& MessageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

MessageAck* MessageAck::default_instance_ = NULL;

MessageAck* MessageAck::New(::google::protobuf::Arena* arena) const {
  MessageAck* n = new MessageAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.MessageAck)
  message_ids_.Clear();
}

bool MessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.MessageAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 message_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_message_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_message_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.MessageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.MessageAck)
  return false;
#undef DO_
}

void MessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.MessageAck)
  // repeated int64 message_ids = 1;
  if (this->message_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_message_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->message_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->message_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.MessageAck)
}

::google::protobuf::uint8* MessageAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.MessageAck)
  // repeated int64 message_ids = 1;
  if (this->message_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _message_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->message_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->message_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.MessageAck)
  return target;
}

int MessageAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.MessageAck)
  int total_size = 0;

  // repeated int64 message_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->message_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->message_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _message_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.MessageAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.MessageAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.MessageAck)
    MergeFrom(*source);
  }
}

void MessageAck::MergeFrom(const MessageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.MessageAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  message_ids_.MergeFrom(from.message_ids_);
}

void MessageAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.MessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAck::CopyFrom(const MessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.MessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAck::IsInitialized() const {

  return true;
}

void MessageAck::Swap(MessageAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageAck::InternalSwap(MessageAck* other) {
  message_ids_.UnsafeArenaSwap(&other->message_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageAck_descriptor_;
  metadata.reflection = MessageAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageAck

// repeated int64 message_ids = 1;
int MessageAck::message_ids_size() const {
  return message_ids_.size();
}
void MessageAck::clear_message_ids() {
  message_ids_.Clear();
}
 ::google::protobuf::int64 MessageAck::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:zproto.MessageAck.message_ids)
  return message_ids_.Get(index);
}
 void MessageAck::set_message_ids(int index, ::google::protobuf::int64 value) {
  message_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.MessageAck.message_ids)
}
 void MessageAck::add_message_ids(::google::protobuf::int64 value) {
  message_ids_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.MessageAck.message_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MessageAck::message_ids() const {
  // @@protoc_insertion_point(field_list:zproto.MessageAck.message_ids)
  return message_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MessageAck::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:zproto.MessageAck.message_ids)
  return &message_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsentMessage::kMessageIdFieldNumber;
const int UnsentMessage::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsentMessage::UnsentMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.UnsentMessage)
}

void UnsentMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnsentMessage::UnsentMessage(const UnsentMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.UnsentMessage)
}

void UnsentMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  len_ = 0;
}

UnsentMessage::~UnsentMessage() {
  // @@protoc_insertion_point(destructor:zproto.UnsentMessage)
  SharedDtor();
}

void UnsentMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsentMessage_descriptor_;
}

const UnsentMessage& UnsentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

UnsentMessage* UnsentMessage::default_instance_ = NULL;

UnsentMessage* UnsentMessage::New(::google::protobuf::Arena* arena) const {
  UnsentMessage* n = new UnsentMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.UnsentMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnsentMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnsentMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(message_id_, len_);

#undef ZR_HELPER_
#undef ZR_

}

bool UnsentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.UnsentMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional int32 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.UnsentMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.UnsentMessage)
  return false;
#undef DO_
}

void UnsentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.UnsentMessage)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // optional int32 len = 2;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.UnsentMessage)
}

::google::protobuf::uint8* UnsentMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.UnsentMessage)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // optional int32 len = 2;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.UnsentMessage)
  return target;
}

int UnsentMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.UnsentMessage)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // optional int32 len = 2;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsentMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.UnsentMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnsentMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsentMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.UnsentMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.UnsentMessage)
    MergeFrom(*source);
  }
}

void UnsentMessage::MergeFrom(const UnsentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.UnsentMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
}

void UnsentMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.UnsentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsentMessage::CopyFrom(const UnsentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.UnsentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsentMessage::IsInitialized() const {

  return true;
}

void UnsentMessage::Swap(UnsentMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsentMessage::InternalSwap(UnsentMessage* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(len_, other->len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsentMessage_descriptor_;
  metadata.reflection = UnsentMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnsentMessage

// optional int64 message_id = 1;
void UnsentMessage::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UnsentMessage::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.UnsentMessage.message_id)
  return message_id_;
}
 void UnsentMessage::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UnsentMessage.message_id)
}

// optional int32 len = 2;
void UnsentMessage::clear_len() {
  len_ = 0;
}
 ::google::protobuf::int32 UnsentMessage::len() const {
  // @@protoc_insertion_point(field_get:zproto.UnsentMessage.len)
  return len_;
}
 void UnsentMessage::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:zproto.UnsentMessage.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsentResponse::kMessageIdFieldNumber;
const int UnsentResponse::kRequestMessageIdFieldNumber;
const int UnsentResponse::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsentResponse::UnsentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.UnsentResponse)
}

void UnsentResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnsentResponse::UnsentResponse(const UnsentResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.UnsentResponse)
}

void UnsentResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
  request_message_id_ = GOOGLE_LONGLONG(0);
  len_ = 0;
}

UnsentResponse::~UnsentResponse() {
  // @@protoc_insertion_point(destructor:zproto.UnsentResponse)
  SharedDtor();
}

void UnsentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsentResponse_descriptor_;
}

const UnsentResponse& UnsentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

UnsentResponse* UnsentResponse::default_instance_ = NULL;

UnsentResponse* UnsentResponse::New(::google::protobuf::Arena* arena) const {
  UnsentResponse* n = new UnsentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.UnsentResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnsentResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnsentResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(message_id_, len_);

#undef ZR_HELPER_
#undef ZR_

}

bool UnsentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.UnsentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_message_id;
        break;
      }

      // optional int64 request_message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_request_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // optional int32 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.UnsentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.UnsentResponse)
  return false;
#undef DO_
}

void UnsentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.UnsentResponse)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // optional int64 request_message_id = 2;
  if (this->request_message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->request_message_id(), output);
  }

  // optional int32 len = 3;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.UnsentResponse)
}

::google::protobuf::uint8* UnsentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.UnsentResponse)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // optional int64 request_message_id = 2;
  if (this->request_message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->request_message_id(), target);
  }

  // optional int32 len = 3;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.UnsentResponse)
  return target;
}

int UnsentResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.UnsentResponse)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  // optional int64 request_message_id = 2;
  if (this->request_message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_message_id());
  }

  // optional int32 len = 3;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.UnsentResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnsentResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.UnsentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.UnsentResponse)
    MergeFrom(*source);
  }
}

void UnsentResponse::MergeFrom(const UnsentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.UnsentResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.request_message_id() != 0) {
    set_request_message_id(from.request_message_id());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
}

void UnsentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.UnsentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsentResponse::CopyFrom(const UnsentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.UnsentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsentResponse::IsInitialized() const {

  return true;
}

void UnsentResponse::Swap(UnsentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsentResponse::InternalSwap(UnsentResponse* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(request_message_id_, other->request_message_id_);
  std::swap(len_, other->len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsentResponse_descriptor_;
  metadata.reflection = UnsentResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnsentResponse

// optional int64 message_id = 1;
void UnsentResponse::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UnsentResponse::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.UnsentResponse.message_id)
  return message_id_;
}
 void UnsentResponse::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UnsentResponse.message_id)
}

// optional int64 request_message_id = 2;
void UnsentResponse::clear_request_message_id() {
  request_message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UnsentResponse::request_message_id() const {
  // @@protoc_insertion_point(field_get:zproto.UnsentResponse.request_message_id)
  return request_message_id_;
}
 void UnsentResponse::set_request_message_id(::google::protobuf::int64 value) {
  
  request_message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UnsentResponse.request_message_id)
}

// optional int32 len = 3;
void UnsentResponse::clear_len() {
  len_ = 0;
}
 ::google::protobuf::int32 UnsentResponse::len() const {
  // @@protoc_insertion_point(field_get:zproto.UnsentResponse.len)
  return len_;
}
 void UnsentResponse::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:zproto.UnsentResponse.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestResend::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestResend::RequestResend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.RequestResend)
}

void RequestResend::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestResend::RequestResend(const RequestResend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.RequestResend)
}

void RequestResend::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  message_id_ = GOOGLE_LONGLONG(0);
}

RequestResend::~RequestResend() {
  // @@protoc_insertion_point(destructor:zproto.RequestResend)
  SharedDtor();
}

void RequestResend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestResend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResend_descriptor_;
}

const RequestResend& RequestResend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

RequestResend* RequestResend::default_instance_ = NULL;

RequestResend* RequestResend::New(::google::protobuf::Arena* arena) const {
  RequestResend* n = new RequestResend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestResend::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.RequestResend)
  message_id_ = GOOGLE_LONGLONG(0);
}

bool RequestResend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.RequestResend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 message_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.RequestResend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.RequestResend)
  return false;
#undef DO_
}

void RequestResend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.RequestResend)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.RequestResend)
}

::google::protobuf::uint8* RequestResend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.RequestResend)
  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.RequestResend)
  return target;
}

int RequestResend::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.RequestResend)
  int total_size = 0;

  // optional int64 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.RequestResend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestResend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestResend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.RequestResend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.RequestResend)
    MergeFrom(*source);
  }
}

void RequestResend::MergeFrom(const RequestResend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.RequestResend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
}

void RequestResend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.RequestResend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResend::CopyFrom(const RequestResend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.RequestResend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResend::IsInitialized() const {

  return true;
}

void RequestResend::Swap(RequestResend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestResend::InternalSwap(RequestResend* other) {
  std::swap(message_id_, other->message_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestResend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResend_descriptor_;
  metadata.reflection = RequestResend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestResend

// optional int64 message_id = 1;
void RequestResend::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestResend::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.RequestResend.message_id)
  return message_id_;
}
 void RequestResend::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RequestResend.message_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSession::kSessionIdFieldNumber;
const int NewSession::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSession::NewSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.NewSession)
}

void NewSession::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewSession::NewSession(const NewSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.NewSession)
}

void NewSession::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  session_id_ = GOOGLE_LONGLONG(0);
  message_id_ = GOOGLE_LONGLONG(0);
}

NewSession::~NewSession() {
  // @@protoc_insertion_point(destructor:zproto.NewSession)
  SharedDtor();
}

void NewSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSession_descriptor_;
}

const NewSession& NewSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

NewSession* NewSession::default_instance_ = NULL;

NewSession* NewSession::New(::google::protobuf::Arena* arena) const {
  NewSession* n = new NewSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSession::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.NewSession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NewSession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NewSession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_id_, message_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool NewSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.NewSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_message_id;
        break;
      }

      // optional int64 message_id = 2;
      case 2: {
        if (tag == 16) {
         parse_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.NewSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.NewSession)
  return false;
#undef DO_
}

void NewSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.NewSession)
  // optional int64 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->session_id(), output);
  }

  // optional int64 message_id = 2;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->message_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.NewSession)
}

::google::protobuf::uint8* NewSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.NewSession)
  // optional int64 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->session_id(), target);
  }

  // optional int64 message_id = 2;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->message_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.NewSession)
  return target;
}

int NewSession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.NewSession)
  int total_size = 0;

  // optional int64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // optional int64 message_id = 2;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.NewSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewSession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.NewSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.NewSession)
    MergeFrom(*source);
  }
}

void NewSession::MergeFrom(const NewSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.NewSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
}

void NewSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.NewSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSession::CopyFrom(const NewSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.NewSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSession::IsInitialized() const {

  return true;
}

void NewSession::Swap(NewSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSession::InternalSwap(NewSession* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(message_id_, other->message_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSession_descriptor_;
  metadata.reflection = NewSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSession

// optional int64 session_id = 1;
void NewSession::clear_session_id() {
  session_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NewSession::session_id() const {
  // @@protoc_insertion_point(field_get:zproto.NewSession.session_id)
  return session_id_;
}
 void NewSession::set_session_id(::google::protobuf::int64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.NewSession.session_id)
}

// optional int64 message_id = 2;
void NewSession::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NewSession::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.NewSession.message_id)
  return message_id_;
}
 void NewSession::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.NewSession.message_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionHello::SessionHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.SessionHello)
}

void SessionHello::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SessionHello::SessionHello(const SessionHello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.SessionHello)
}

void SessionHello::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SessionHello::~SessionHello() {
  // @@protoc_insertion_point(destructor:zproto.SessionHello)
  SharedDtor();
}

void SessionHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionHello_descriptor_;
}

const SessionHello& SessionHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

SessionHello* SessionHello::default_instance_ = NULL;

SessionHello* SessionHello::New(::google::protobuf::Arena* arena) const {
  SessionHello* n = new SessionHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionHello::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.SessionHello)
}

bool SessionHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.SessionHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.SessionHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.SessionHello)
  return false;
#undef DO_
}

void SessionHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.SessionHello)
  // @@protoc_insertion_point(serialize_end:zproto.SessionHello)
}

::google::protobuf::uint8* SessionHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.SessionHello)
  // @@protoc_insertion_point(serialize_to_array_end:zproto.SessionHello)
  return target;
}

int SessionHello::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.SessionHello)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.SessionHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionHello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.SessionHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.SessionHello)
    MergeFrom(*source);
  }
}

void SessionHello::MergeFrom(const SessionHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.SessionHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SessionHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.SessionHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionHello::CopyFrom(const SessionHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.SessionHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHello::IsInitialized() const {

  return true;
}

void SessionHello::Swap(SessionHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionHello::InternalSwap(SessionHello* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionHello_descriptor_;
  metadata.reflection = SessionHello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionHello

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionLost::SessionLost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.SessionLost)
}

void SessionLost::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SessionLost::SessionLost(const SessionLost& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.SessionLost)
}

void SessionLost::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SessionLost::~SessionLost() {
  // @@protoc_insertion_point(destructor:zproto.SessionLost)
  SharedDtor();
}

void SessionLost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionLost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionLost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionLost_descriptor_;
}

const SessionLost& SessionLost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

SessionLost* SessionLost::default_instance_ = NULL;

SessionLost* SessionLost::New(::google::protobuf::Arena* arena) const {
  SessionLost* n = new SessionLost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionLost::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.SessionLost)
}

bool SessionLost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.SessionLost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.SessionLost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.SessionLost)
  return false;
#undef DO_
}

void SessionLost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.SessionLost)
  // @@protoc_insertion_point(serialize_end:zproto.SessionLost)
}

::google::protobuf::uint8* SessionLost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.SessionLost)
  // @@protoc_insertion_point(serialize_to_array_end:zproto.SessionLost)
  return target;
}

int SessionLost::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.SessionLost)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionLost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.SessionLost)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionLost* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionLost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.SessionLost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.SessionLost)
    MergeFrom(*source);
  }
}

void SessionLost::MergeFrom(const SessionLost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.SessionLost)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SessionLost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.SessionLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionLost::CopyFrom(const SessionLost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.SessionLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionLost::IsInitialized() const {

  return true;
}

void SessionLost::Swap(SessionLost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionLost::InternalSwap(SessionLost* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionLost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionLost_descriptor_;
  metadata.reflection = SessionLost_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionLost

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Container::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Container::Container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zproto.Container)
}

void Container::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Container::Container(const Container& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zproto.Container)
}

void Container::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:zproto.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zproto_5ftransport_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New(::google::protobuf::Arena* arena) const {
  Container* n = new Container;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:zproto.Container)
  data_.Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zproto.Container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zproto.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zproto.Container)
  return false;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zproto.Container)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zproto.Container)
}

::google::protobuf::uint8* Container::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zproto.Container)
  // repeated bytes data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zproto.Container)
  return target;
}

int Container::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:zproto.Container)
  int total_size = 0;

  // repeated bytes data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zproto.Container)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Container* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Container>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zproto.Container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zproto.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zproto.Container)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zproto.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zproto.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {

  return true;
}

void Container::Swap(Container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Container::InternalSwap(Container* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Container

// repeated bytes data = 1;
int Container::data_size() const {
  return data_.size();
}
void Container::clear_data() {
  data_.Clear();
}
 const ::std::string& Container::data(int index) const {
  // @@protoc_insertion_point(field_get:zproto.Container.data)
  return data_.Get(index);
}
 ::std::string* Container::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.Container.data)
  return data_.Mutable(index);
}
 void Container::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.Container.data)
  data_.Mutable(index)->assign(value);
}
 void Container::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.Container.data)
}
 void Container::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.Container.data)
}
 ::std::string* Container::add_data() {
  // @@protoc_insertion_point(field_add_mutable:zproto.Container.data)
  return data_.Add();
}
 void Container::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.Container.data)
}
 void Container::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.Container.data)
}
 void Container::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.Container.data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Container::data() const {
  // @@protoc_insertion_point(field_list:zproto.Container.data)
  return data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Container::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:zproto.Container.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)
