// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zproto_basic_sync.proto

#ifndef PROTOBUF_zproto_5fbasic_5fsync_2eproto__INCLUDED
#define PROTOBUF_zproto_5fbasic_5fsync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

class Push;
class RpcError;
class RpcFloodWait;
class RpcInternalError;
class RpcOk;
class RpcRequest;

// ===================================================================

class RpcRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RpcRequest) */ {
 public:
  RpcRequest();
  virtual ~RpcRequest();

  RpcRequest(const RpcRequest& from);

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();

  void Swap(RpcRequest* other);

  // implements Message ----------------------------------------------

  inline RpcRequest* New() const { return New(NULL); }

  RpcRequest* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 method_id = 1;
  void clear_method_id();
  static const int kMethodIdFieldNumber = 1;
  ::google::protobuf::int32 method_id() const;
  void set_method_id(::google::protobuf::int32 value);

  // optional bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:zproto.RpcRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 method_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static RpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcOk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RpcOk) */ {
 public:
  RpcOk();
  virtual ~RpcOk();

  RpcOk(const RpcOk& from);

  inline RpcOk& operator=(const RpcOk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcOk& default_instance();

  void Swap(RpcOk* other);

  // implements Message ----------------------------------------------

  inline RpcOk* New() const { return New(NULL); }

  RpcOk* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcOk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 method_response_id = 1;
  void clear_method_response_id();
  static const int kMethodResponseIdFieldNumber = 1;
  ::google::protobuf::int32 method_response_id() const;
  void set_method_response_id(::google::protobuf::int32 value);

  // optional bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:zproto.RpcOk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 method_response_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static RpcOk* default_instance_;
};
// -------------------------------------------------------------------

class RpcError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RpcError) */ {
 public:
  RpcError();
  virtual ~RpcError();

  RpcError(const RpcError& from);

  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcError& default_instance();

  void Swap(RpcError* other);

  // implements Message ----------------------------------------------

  inline RpcError* New() const { return New(NULL); }

  RpcError* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional string error_tag = 2;
  void clear_error_tag();
  static const int kErrorTagFieldNumber = 2;
  const ::std::string& error_tag() const;
  void set_error_tag(const ::std::string& value);
  void set_error_tag(const char* value);
  void set_error_tag(const char* value, size_t size);
  ::std::string* mutable_error_tag();
  ::std::string* release_error_tag();
  void set_allocated_error_tag(::std::string* error_tag);

  // optional string user_message = 3;
  void clear_user_message();
  static const int kUserMessageFieldNumber = 3;
  const ::std::string& user_message() const;
  void set_user_message(const ::std::string& value);
  void set_user_message(const char* value);
  void set_user_message(const char* value, size_t size);
  ::std::string* mutable_user_message();
  ::std::string* release_user_message();
  void set_allocated_user_message(::std::string* user_message);

  // optional bool can_try_again = 4;
  void clear_can_try_again();
  static const int kCanTryAgainFieldNumber = 4;
  bool can_try_again() const;
  void set_can_try_again(bool value);

  // optional bytes error_data = 5;
  void clear_error_data();
  static const int kErrorDataFieldNumber = 5;
  const ::std::string& error_data() const;
  void set_error_data(const ::std::string& value);
  void set_error_data(const char* value);
  void set_error_data(const void* value, size_t size);
  ::std::string* mutable_error_data();
  ::std::string* release_error_data();
  void set_allocated_error_data(::std::string* error_data);

  // @@protoc_insertion_point(class_scope:zproto.RpcError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_tag_;
  ::google::protobuf::int32 error_code_;
  bool can_try_again_;
  ::google::protobuf::internal::ArenaStringPtr user_message_;
  ::google::protobuf::internal::ArenaStringPtr error_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static RpcError* default_instance_;
};
// -------------------------------------------------------------------

class RpcFloodWait : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RpcFloodWait) */ {
 public:
  RpcFloodWait();
  virtual ~RpcFloodWait();

  RpcFloodWait(const RpcFloodWait& from);

  inline RpcFloodWait& operator=(const RpcFloodWait& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcFloodWait& default_instance();

  void Swap(RpcFloodWait* other);

  // implements Message ----------------------------------------------

  inline RpcFloodWait* New() const { return New(NULL); }

  RpcFloodWait* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcFloodWait* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 delay = 1;
  void clear_delay();
  static const int kDelayFieldNumber = 1;
  ::google::protobuf::int32 delay() const;
  void set_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.RpcFloodWait)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 delay_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static RpcFloodWait* default_instance_;
};
// -------------------------------------------------------------------

class RpcInternalError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RpcInternalError) */ {
 public:
  RpcInternalError();
  virtual ~RpcInternalError();

  RpcInternalError(const RpcInternalError& from);

  inline RpcInternalError& operator=(const RpcInternalError& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcInternalError& default_instance();

  void Swap(RpcInternalError* other);

  // implements Message ----------------------------------------------

  inline RpcInternalError* New() const { return New(NULL); }

  RpcInternalError* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RpcInternalError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool can_try_again = 1;
  void clear_can_try_again();
  static const int kCanTryAgainFieldNumber = 1;
  bool can_try_again() const;
  void set_can_try_again(bool value);

  // optional int32 try_again_delay = 2;
  void clear_try_again_delay();
  static const int kTryAgainDelayFieldNumber = 2;
  ::google::protobuf::int32 try_again_delay() const;
  void set_try_again_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.RpcInternalError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool can_try_again_;
  ::google::protobuf::int32 try_again_delay_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static RpcInternalError* default_instance_;
};
// -------------------------------------------------------------------

class Push : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.Push) */ {
 public:
  Push();
  virtual ~Push();

  Push(const Push& from);

  inline Push& operator=(const Push& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Push& default_instance();

  void Swap(Push* other);

  // implements Message ----------------------------------------------

  inline Push* New() const { return New(NULL); }

  Push* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Push* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 update_id = 1;
  void clear_update_id();
  static const int kUpdateIdFieldNumber = 1;
  ::google::protobuf::int32 update_id() const;
  void set_update_id(::google::protobuf::int32 value);

  // optional bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:zproto.Push)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::int32 update_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_AssignDesc_zproto_5fbasic_5fsync_2eproto();
  friend void protobuf_ShutdownFile_zproto_5fbasic_5fsync_2eproto();

  void InitAsDefaultInstance();
  static Push* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcRequest

// optional int32 method_id = 1;
inline void RpcRequest::clear_method_id() {
  method_id_ = 0;
}
inline ::google::protobuf::int32 RpcRequest::method_id() const {
  // @@protoc_insertion_point(field_get:zproto.RpcRequest.method_id)
  return method_id_;
}
inline void RpcRequest::set_method_id(::google::protobuf::int32 value) {
  
  method_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcRequest.method_id)
}

// optional bytes body = 2;
inline void RpcRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcRequest::body() const {
  // @@protoc_insertion_point(field_get:zproto.RpcRequest.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RpcRequest.body)
}
inline void RpcRequest::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RpcRequest.body)
}
inline void RpcRequest::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RpcRequest.body)
}
inline ::std::string* RpcRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RpcRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequest::release_body() {
  // @@protoc_insertion_point(field_release:zproto.RpcRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:zproto.RpcRequest.body)
}

// -------------------------------------------------------------------

// RpcOk

// optional int32 method_response_id = 1;
inline void RpcOk::clear_method_response_id() {
  method_response_id_ = 0;
}
inline ::google::protobuf::int32 RpcOk::method_response_id() const {
  // @@protoc_insertion_point(field_get:zproto.RpcOk.method_response_id)
  return method_response_id_;
}
inline void RpcOk::set_method_response_id(::google::protobuf::int32 value) {
  
  method_response_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcOk.method_response_id)
}

// optional bytes body = 2;
inline void RpcOk::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcOk::body() const {
  // @@protoc_insertion_point(field_get:zproto.RpcOk.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcOk::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RpcOk.body)
}
inline void RpcOk::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RpcOk.body)
}
inline void RpcOk::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RpcOk.body)
}
inline ::std::string* RpcOk::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RpcOk.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcOk::release_body() {
  // @@protoc_insertion_point(field_release:zproto.RpcOk.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcOk::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:zproto.RpcOk.body)
}

// -------------------------------------------------------------------

// RpcError

// optional int32 error_code = 1;
inline void RpcError::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 RpcError::error_code() const {
  // @@protoc_insertion_point(field_get:zproto.RpcError.error_code)
  return error_code_;
}
inline void RpcError::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcError.error_code)
}

// optional string error_tag = 2;
inline void RpcError::clear_error_tag() {
  error_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcError::error_tag() const {
  // @@protoc_insertion_point(field_get:zproto.RpcError.error_tag)
  return error_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_error_tag(const ::std::string& value) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RpcError.error_tag)
}
inline void RpcError::set_error_tag(const char* value) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RpcError.error_tag)
}
inline void RpcError::set_error_tag(const char* value, size_t size) {
  
  error_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RpcError.error_tag)
}
inline ::std::string* RpcError::mutable_error_tag() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RpcError.error_tag)
  return error_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcError::release_error_tag() {
  // @@protoc_insertion_point(field_release:zproto.RpcError.error_tag)
  
  return error_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_allocated_error_tag(::std::string* error_tag) {
  if (error_tag != NULL) {
    
  } else {
    
  }
  error_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_tag);
  // @@protoc_insertion_point(field_set_allocated:zproto.RpcError.error_tag)
}

// optional string user_message = 3;
inline void RpcError::clear_user_message() {
  user_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcError::user_message() const {
  // @@protoc_insertion_point(field_get:zproto.RpcError.user_message)
  return user_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_user_message(const ::std::string& value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RpcError.user_message)
}
inline void RpcError::set_user_message(const char* value) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RpcError.user_message)
}
inline void RpcError::set_user_message(const char* value, size_t size) {
  
  user_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RpcError.user_message)
}
inline ::std::string* RpcError::mutable_user_message() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RpcError.user_message)
  return user_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcError::release_user_message() {
  // @@protoc_insertion_point(field_release:zproto.RpcError.user_message)
  
  return user_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_allocated_user_message(::std::string* user_message) {
  if (user_message != NULL) {
    
  } else {
    
  }
  user_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_message);
  // @@protoc_insertion_point(field_set_allocated:zproto.RpcError.user_message)
}

// optional bool can_try_again = 4;
inline void RpcError::clear_can_try_again() {
  can_try_again_ = false;
}
inline bool RpcError::can_try_again() const {
  // @@protoc_insertion_point(field_get:zproto.RpcError.can_try_again)
  return can_try_again_;
}
inline void RpcError::set_can_try_again(bool value) {
  
  can_try_again_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcError.can_try_again)
}

// optional bytes error_data = 5;
inline void RpcError::clear_error_data() {
  error_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcError::error_data() const {
  // @@protoc_insertion_point(field_get:zproto.RpcError.error_data)
  return error_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_error_data(const ::std::string& value) {
  
  error_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.RpcError.error_data)
}
inline void RpcError::set_error_data(const char* value) {
  
  error_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.RpcError.error_data)
}
inline void RpcError::set_error_data(const void* value, size_t size) {
  
  error_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.RpcError.error_data)
}
inline ::std::string* RpcError::mutable_error_data() {
  
  // @@protoc_insertion_point(field_mutable:zproto.RpcError.error_data)
  return error_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcError::release_error_data() {
  // @@protoc_insertion_point(field_release:zproto.RpcError.error_data)
  
  return error_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcError::set_allocated_error_data(::std::string* error_data) {
  if (error_data != NULL) {
    
  } else {
    
  }
  error_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_data);
  // @@protoc_insertion_point(field_set_allocated:zproto.RpcError.error_data)
}

// -------------------------------------------------------------------

// RpcFloodWait

// optional int32 delay = 1;
inline void RpcFloodWait::clear_delay() {
  delay_ = 0;
}
inline ::google::protobuf::int32 RpcFloodWait::delay() const {
  // @@protoc_insertion_point(field_get:zproto.RpcFloodWait.delay)
  return delay_;
}
inline void RpcFloodWait::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcFloodWait.delay)
}

// -------------------------------------------------------------------

// RpcInternalError

// optional bool can_try_again = 1;
inline void RpcInternalError::clear_can_try_again() {
  can_try_again_ = false;
}
inline bool RpcInternalError::can_try_again() const {
  // @@protoc_insertion_point(field_get:zproto.RpcInternalError.can_try_again)
  return can_try_again_;
}
inline void RpcInternalError::set_can_try_again(bool value) {
  
  can_try_again_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcInternalError.can_try_again)
}

// optional int32 try_again_delay = 2;
inline void RpcInternalError::clear_try_again_delay() {
  try_again_delay_ = 0;
}
inline ::google::protobuf::int32 RpcInternalError::try_again_delay() const {
  // @@protoc_insertion_point(field_get:zproto.RpcInternalError.try_again_delay)
  return try_again_delay_;
}
inline void RpcInternalError::set_try_again_delay(::google::protobuf::int32 value) {
  
  try_again_delay_ = value;
  // @@protoc_insertion_point(field_set:zproto.RpcInternalError.try_again_delay)
}

// -------------------------------------------------------------------

// Push

// optional int32 update_id = 1;
inline void Push::clear_update_id() {
  update_id_ = 0;
}
inline ::google::protobuf::int32 Push::update_id() const {
  // @@protoc_insertion_point(field_get:zproto.Push.update_id)
  return update_id_;
}
inline void Push::set_update_id(::google::protobuf::int32 value) {
  
  update_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.Push.update_id)
}

// optional bytes body = 2;
inline void Push::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Push::body() const {
  // @@protoc_insertion_point(field_get:zproto.Push.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Push::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Push.body)
}
inline void Push::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Push.body)
}
inline void Push::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Push.body)
}
inline ::std::string* Push::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Push.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Push::release_body() {
  // @@protoc_insertion_point(field_release:zproto.Push.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Push::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:zproto.Push.body)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zproto_5fbasic_5fsync_2eproto__INCLUDED
